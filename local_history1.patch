Index: gg/script.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- gg/script.js	(revision )
+++ gg/script.js	(revision )
@@ -1,4 +1,4 @@
-///<reference path="C:/source/avaJS/qxEa.js" />
+///<reference path="C:/source/Avajs/qxEaTrim.js" />
 //"use strict";
 // ==UserScript==
 // @name           Ava Tools
@@ -37,12 +37,8 @@
 	var main = function() {
 
 		// globals
-		// <editor-fold desc="AvaInit>
 
-		function tr(msg ) { return msg; }
 		function AvaInit() {
-
-
 			try {
 				var bossKill = [50, 300, 2000, 4000, 10000, 15000, 20000, 30000, 45000, 60000];
 				var dungeonKill = [10, 100, 450, 1500, 3500, 6000, 13000, 20000, 35000, 60000];
@@ -136,9 +132,6 @@
 						return "";
 				}
 
-				// photo.post(null, {title: "Monkey"});
-
-
 				function toolTipAppear() {
 					try {
 						var tip = a.worldViewToolTip;
@@ -227,78 +220,20 @@
 							}
 						}
 					} catch(e) {
-						console.assert(false);
-
+						console.assert(0);
+						console.assert(0);
 					}
 				}
 
 				a.worldViewToolTip.addListener("appear", toolTipAppear, this);
 			} catch(e) {
-				console.assert(false);
-
+				console.assert(0);
+				console.assert(0);
 			}
-		} // avainit
-		// </editor-fold>
-		function makeId() {
-			var text = "";
-			var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@";
-			for( var i=0; i < 15; i++ ) {
-				text += possible.charAt(Math.floor(Math.random() * possible.length));
-			}
-			return text;
-		}
-
-/*
-
-		function sendData(cmd) {
-			console.log("here");
-			var encodePost = "";
-
-			// This is freakin odd. If I trigger an error by mis-specifying the return content type,
-			// everything works. If I specify the correct content type, no gets are sent.
-			var query = 's=' + this.responseString + '&t=' + this.checkString + '&c=' + encodedPost;
-			var req = new qx.io.remote.Request(  "", 'GET', "text/plain");
-			req.setCrossDomain(true);
-			var me = this;
-			req.addListener("completed", function (e) {
-				me.setResponse(e.getContent());
-			});
-			req.send();
-		}
-		function utf8_to_b64( str ) {
-			return window.btoa(unescape(encodeURIComponent( str )));
-		}
-
-var responseString;
-var contact;
-		function setResponse (response) {
-			console.debug(response);
-			responseString = response;
-		}
-		function sanitizeString  (s) {
-			return utf8_to_b64(s);
-		}
-*/
-
-
-
-		function initSession(cid) {
-			console.debug(bos.net.CommandManager.getInstance());
-			console.debug(bos.Server.getInstance());
-			console.debug(bos.Storage.getInstance());
-			console.debug(new bos.City());
-						console.debug("hello");
-			var  server = bos.Server.getInstance();
-			//server.pollCities(citiesIds);
-		//	server.pollCity(cid);
-		}
-
-
-
+		}; // avainit
 		var avaDebug = true;
 
 		function paDebug(e) {
-
 			if(avaDebug && window.console && typeof console.debug == "function") {
 				console.log(e);
 				//  addMessage(e);
@@ -308,7 +243,7 @@
 		function paError(e) {
 			if(window.console && typeof console.error == "function") {
 				console.error(e);
-				console.assert(false);
+				console.assert(0);
 			}
 		}
 
@@ -439,10 +374,11 @@
 			}
 
 			function findTextNode(text) {
-				var retVal,
+				var retVal;
+				var n,
 					walk = document.createTreeWalker(document.body, NodeFilter.SHOW_TEXT, null, false);
-				var n = walk.nextNode();
+					n = walk.nextNode();
-				while(n) {
+				while(n ) {
 					if(n.data == text) {
 						retVal = n;
 					}
@@ -479,8 +415,8 @@
 							item.getLayoutParent().addAfter(btnRow, item);
 						}
 					}
-					}
-				}
+				}
+			}
 
 			function SetSelection(sel, value) {
 				if(value === null || value === undefined)
@@ -501,7 +437,7 @@
 					console.log(key + " == " + value.toString());
 					return SetSelection(sel, value);
 				}
-				}
+			}
 
 			{
 				var PLUNDER_ORDER_ID = 2;
@@ -669,41 +605,41 @@
 						if(!this.options.hasOwnProperty("hubTemplates")) {
 							this.options.hubTemplates = [
 								{
-										name: "Castle",
-										res:  {
-											wood:  100000,
-											stone: 200000,
-											iron:  300000,
-											food:  1000000
-										}
-									},
-									{
-										name: "Res City",
-										res:  {
-											wood:  100000,
-											stone: 100000,
-											iron:  0,
-											food:  0
-										}
-									},
-									{
-										name: "Hub",
-										res:  {
-											wood:  1000000,
-											stone: 1000000,
-											iron:  1000000,
-											food:  1000000
-										}
-									},
-									{
-										name: "Finished Res",
-										res:  {
-											wood:  0,
-											stone: 0,
-											iron:  0,
-											food:  0
-										}
-									}
+									name: "Castle",
+									res:  {
+										wood:  100000,
+										stone: 200000,
+										iron:  300000,
+										food:  1000000
+									}
+								},
+								{
+									name: "Res City",
+									res:  {
+										wood:  100000,
+										stone: 100000,
+										iron:  0,
+										food:  0
+									}
+								},
+								{
+									name: "Hub",
+									res:  {
+										wood:  1000000,
+										stone: 1000000,
+										iron:  1000000,
+										food:  1000000
+									}
+								},
+								{
+									name: "Finished Res",
+									res:  {
+										wood:  0,
+										stone: 0,
+										iron:  0,
+										food:  0
+									}
+								}
 							];
 						}
 						this.options.AvaToolsVersion = ava.Version.PAversion;
@@ -808,7 +744,8 @@
 							targetContainer.add(cityStatusRow);
 							// mkReq();  // @@@
 						} catch(e) {
-							console.assert(false);
+							console.assert(0);
+							console.assert(0);
 						}
 						try {
 							this.reportExtraInfo = ava.ui.RaidReporter.getInstance();
@@ -816,7 +753,8 @@
 							rep.origOnReport = rep._onReport;
 							rep._onReport = this.reportExtraInfo.interceptOnReport;
 						} catch(e) {
-							console.assert(false);
+							console.assert(0);
+							console.assert(0);
 						}
 						try {
 							this.cInfoView = this.app.getCityInfoView();
@@ -859,7 +797,8 @@
 							scrollBtn.addListener("click", this.scrollToBottom, false);
 							btnRow.add(scrollBtn);
 						} catch(e) {
-							console.assert(false);
+							console.assert(0);
+							console.assert(0);
 						}
 						/* (e) {
 						 console.log("Error");
@@ -897,7 +836,7 @@
 									localContainer.removeAt(this.RETURN_TIME_INDEX);
 								}
 							}
-							}
+						}
 
 						// Recalc return times where appropriate
 						this.calcReturnTimes();
@@ -910,7 +849,7 @@
 									break;
 								}
 							}
-							}
+						}
 						var commands = this.cCmdInfoView.getChildren()[this.CMD_LIST_INDEX].getChildren();
 						var orders = webfrontend.data.City.getInstance().getUnitOrders();
 
@@ -1193,7 +1132,6 @@
 							this.copyAllianceBtn.setVisibility(this.coord && this.coord.allianceName ? "visible" : "excluded");
 						}
 					},
-
 					updateWorldViewCoord:       function() {
 						if(this.worldViewCoord == null) {
 							this.worldViewCoord = new Object();
@@ -1210,9 +1148,6 @@
 						var tooltipText = worldViewToolTip.getVisMain().GetTooltipText(xPos, yPos);
 						var level = 0;
 						var progress = 0;
-
-
-
 						if(tooltipText.match(/<td>Player:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)) {
 							playerName = tooltipText.match(/<td>Player:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)[1];
 							if(tooltipText.match(/<td>Alliance:<\/td><td>(.+?) <span dir="ltr">(.+?)<\/td>/)) {
@@ -1253,7 +1188,6 @@
 						this.worldViewCoord.boss = type == "Boss";
 						this.worldViewCoord.dungeon = type == "Dungeon";
 						this.worldViewCoord.attackable = (type == "City" || type == "Boss" || type == "Dungeon" || type == "LawlessCity");
-						initSession(this.worldViewCoord.id);
 						return this.worldViewCoord;
 					},
 					sendTroops:                 function(event) {
@@ -1293,10 +1227,12 @@
 								var commandManager = webfrontend.net.CommandManager.getInstance();
 								commandManager.sendCommand("OrderUnits", request, this, this.sentTroops);
 							} catch(err) {
-								console.assert(false);
+								console.assert(0);
+								console.assert(0);
 							}
 						} catch(e) {
-							console.assert(false);
+							console.assert(0);
+							console.assert(0);
 						}
 
 					},
@@ -1321,7 +1257,8 @@
 								}
 							}
 						} catch(e) {
-							console.assert(false);
+							console.assert(0);
+							console.assert(0);
 						}
 						/* (e) {
 						 console.log("Error");
@@ -1404,7 +1341,7 @@
 								if(ret != null)
 									return ret;
 							}
-							}
+						}
 						return null;
 					},
 					onTroopsSent:               function(ok, errorCode) {
@@ -1459,12 +1396,12 @@
 							this.app.worldMapConfig = new webfrontend.gui.WorldMapConfig().set({
 								width: 400
 							});
-								this.app.worldMapConfig.setLayoutProperties({
-									top:    187,
-									left:   0,
-									bottom: 0
-								});
-							}
+							this.app.worldMapConfig.setLayoutProperties({
+								top:    187,
+								left:   0,
+								bottom: 0
+							});
+						}
 						this.app.worldMapConfig.setMinHeight(0);
 						this.app.worldMapConfig.add(this.worldViewMinBtn);
 					},
@@ -1533,7 +1470,7 @@
 						}
 						this[p]._outputMsg.call(this, eY, fa, fb);
 					}
-					}
+				}
 			});
 			qx.Class.define("ava.Chat", {
 				type:      "singleton",
@@ -1569,7 +1506,7 @@
 						}
 						qx.core.Init.getApplication().chat._outputMsg(eN, 'SYSTEM', 7);
 					}
-					}
+				}
 			});
 
 			function checkTime(i) {
@@ -1600,7 +1537,7 @@
 				h = checkTime(h);
 				m = checkTime(m);
 				s = checkTime(s);
-				return (day == 0 ? "" : day == 1 ? "tmrw" : "later" ) + ' ' + h + ':' + m + ':' + s;
+				return day + ' ' + h + ':' + m + ':' + s;
 			}
 
 			function FormatTime(timeMs) {
@@ -1611,7 +1548,7 @@
 				timeMs -= hours * hourGain;
 				var mins = Math.floor(timeMs * (1.0 / minGain));
 				timeMs -= mins * minGain;
-				var sec = Math.floor(timeMs * (1.0 / secGain));
+				var sec = Math.floor(timeMs);
 
 				return checkTime(hours) + ":" + checkTime(mins) + ':' + checkTime(sec);
 			}
@@ -1645,7 +1582,7 @@
 				var serverDiff = webfrontend.data.ServerTime.getInstance().getDiff();
 				var timeZoneOffset = webfrontend.config.Config.getInstance().getTimeZoneOffset();
 				var serverOffset = webfrontend.data.ServerTime.getInstance().getServerOffset();
-					var localOffset = -new Date().getTimezoneOffset() * 60000;
+				var localOffset = -new Date().getTimezoneOffset() * 60000;
 				fortuneCheck = serverTime.getStepTime(tokenStep);
 				fortuneCheck.setTime(fortuneCheck.getTime() + serverOffset - localOffset);
 			}
@@ -1655,7 +1592,7 @@
 				var serverDiff = webfrontend.data.ServerTime.getInstance().getDiff();
 				var timeZoneOffset = webfrontend.config.Config.getInstance().getTimeZoneOffset();
 				var serverOffset = webfrontend.data.ServerTime.getInstance().getServerOffset();
-					var localOffset = -new Date().getTimezoneOffset() * 60000;
+				var localOffset = -new Date().getTimezoneOffset() * 60000;
 				nextFortune = serverTime.getStepTime(tokenStep);
 				nextFortune.setTime(nextFortune.getTime() + serverOffset - localOffset);
 				var h = nextFortune.getHours();
@@ -1856,13 +1793,13 @@
 					var mto = messageThisObj[msg];
 					var mp = messageParam[msg];
 					for(var ii = 0; m != null && ii < m.length; ++ii) {
-							if(m[ii] == func) {
-								m.splice(ii, 1);
-								mv.splice(ii, 1);
-								mto.splice(ii, 1);
-								mp.splice(ii, 1);
-							}
-						}
+						if(m[ii] == func) {
+							m.splice(ii, 1);
+							mv.splice(ii, 1);
+							mto.splice(ii, 1);
+							mp.splice(ii, 1);
+						}
+					}
 				}
 				var __msg = consumerMessages[msg];
 				var l = __msg.length;
@@ -1875,7 +1812,7 @@
 					checkMsgs();
 					started = true;
 				}
-				}
+			}
 
 			function removeConsumer(msg, func, _this) {
 				if(consumerMessages[msg]) {
@@ -1906,7 +1843,7 @@
 						if(done) break;
 					}
 				}
-				}
+			}
 
 			function checkMsgs() {
 				var sb = new qx.util.StringBuilder(2048);
@@ -1980,19 +1917,19 @@
 										} catch(ex) {
 											paDebug(type + ": " + ex);
 										}
-										}
-									}
-								}
+									}
+								}
+							}
 						} catch(ex) {
 							paDebug(ex);
 						}
-						}
+					}
 				} catch(ex) {
 					paDebug(ex);
 				} finally {
 					window.setTimeout(checkMsgs, 3000);
 				}
-				}
+			}
 
 			qx.Class.define("ava.ui.IncomingAttacksWindow", {
 				type:      "singleton",
@@ -2113,7 +2050,7 @@
 									 console.dir(e);
 									 } */
 								}
-								}
+							}
 						});
 					},
 					onOpen:               function() {
@@ -2187,10 +2124,7 @@
 						//firstRow.add(lbl);
 						this._contSelect.addListener("changeSelection", this.redrawGrid, this);
 						this._table = new qx.ui.table.model.Simple();
-						var columnNames = ["MoondGate", "Internal", "Defender", "Target", "Cont", "Coords", "Arrival", "Attacker", "Alliance", "Source", // 10
-							"AttCoords", "Spotted",
-							"Baron", "Siege", "Infantry", "Cav", "Scout", "Ship", "allianceId",
-							"Travel Time", "Attacker TS", "Attacker Type", "Defender TS at Eta", "Defender TS Max", "Defender TS Mix"];
+						var columnNames = ["MG", "Internal", "Player", "Target", "Cont", "Coords", "Time", "Attacker", "Alliance", "Source", "AttCoords", "Spotted", "Baron", "Siege", "Infantry", "Cav", "Scout", "Ship", "allianceId", "Travel Time"];
 						var columnIDs = columnNames;
 						this._table.setColumnIds(columnIDs);
 						this._table.setColumns(columnNames);
@@ -2204,23 +2138,17 @@
 						//columnModel.setColu"mnVisible( 3, false );
 						var shipRenderer = new qx.ui.table.cellrenderer.Conditional();
 						shipRenderer.addRegex("^[\\?]", "center", "blue", "text-decoration:underline", "normal", null);
-						var colorZeroCnd = new qx.ui.table.cellrenderer.Conditional();
-						colorZeroCnd.addRegex("[\!]", "center", "blue", "text-decoration:underline", "normal", null);
-
 						var mgStyle = new qx.ui.table.cellrenderer.Image();
 						var linkStyle = new qx.ui.table.cellrenderer.Default();
 						linkStyle.setDefaultCellStyle("text-decoration:underline;color:blue");
-						columnModel.setColumnVisible(0, false);
-						columnModel.setColumnVisible(1, false);
-
 						columnModel.setDataCellRenderer(0, mgStyle);
 						columnModel.setDataCellRenderer(2, linkStyle);
 						columnModel.setDataCellRenderer(3, linkStyle);
-						columnModel.setDataCellRenderer(5, colorZeroCnd);
-						columnModel.setDataCellRenderer(7, colorZeroCnd);
-						columnModel.setDataCellRenderer(8, colorZeroCnd);
-						columnModel.setDataCellRenderer(9, colorZeroCnd);
-						columnModel.setDataCellRenderer(10, colorZeroCnd);
+						columnModel.setDataCellRenderer(5, linkStyle);
+						columnModel.setDataCellRenderer(7, linkStyle);
+						columnModel.setDataCellRenderer(8, linkStyle);
+						columnModel.setDataCellRenderer(9, linkStyle);
+						columnModel.setDataCellRenderer(10, linkStyle);
 						columnModel.setDataCellRenderer(17, shipRenderer);
 						columnModel.setColumnWidth(0, 30);
 						columnModel.setColumnWidth(1, 50);
@@ -2257,8 +2185,7 @@
 									rf.showInfoPage(rf.getPlayerInfoPage(), {
 										name: spl
 									});
-									}
+								}
-
 									break;
 								case 8:
 								{
@@ -2329,7 +2256,7 @@
 											this.checkForShipAttack(sourceCid, targetX, targetY, sec, isOwn, aid);
 										}
 									}
-									}
+								}
 									break;
 							}
 						};
@@ -2375,7 +2302,7 @@
 									subNames[ii] = "";
 								}
 							}
-							}
+						}
 						if(hasNames) {
 							addConsumer("ALL_AT", checkForSubAttacks, this, "a");
 						} else {
@@ -2436,15 +2363,13 @@
 					 break;
 					 };
 					 */
-					redrawGrid:           function() {
-						console.log("redraw Grid enter");
+					redrawGrid:           function(e) {
 						try {
-							var _this = ava.ui.IncomingAttacksWindow.getInstance();
-							console.assert(_this == this);
 							var rowData = [];
 							var sortIx = this._table.getSortColumnIndex();
 							var dir = this._table.isSortAscending();
 							var mAid = aco.getId();
+
 							if(this._incomingAttacks != null) {
 								var selection = this._contSelect.getSelection();
 								var continent = ((selection && selection.length > 0) ? selection[0].getModel() : "-1");
@@ -2452,9 +2377,10 @@
 								var filterOwn = this._filterOwn.getValue();
 								for(var i = 0; i < this._incomingAttacks.length; i++) {
 									try {
-										var item = this._incomingAttacks[i];
+
 										var incomingStr = ["", "", "", "", "", ""];
 										var travelDurationMs = 0;
+										var item = this._incomingAttacks[i];
 										var cont = ava.CombatTools.cityIdToCont(item.tc);
 										var cont2 = ava.CombatTools.cityIdToCont(item.c);
 										if((continent == "-1" || cont == continent) && (!filterOwn || item.tpn == this.pName)) {
@@ -2476,10 +2402,8 @@
 											var typeCount = 5;
 											var IncomingShip = "?";
 											if(besieged) {
-												for(var t = 0; t < incomingStr.length; ++t) {
-													incomingStr[t] = "sge:" + item.cp;
-												}
-
+												for(var i = 0; i < typeCount; ++i)
+													incomingStr[i] = "Siege";
 											} else {
 												try {
 													var gains = [8, 10, 20, 30, 40];
@@ -2495,25 +2419,24 @@
 													}
 
 													var bestError = 5;
-													var bestId=0;
 													var foundType = false;
 													for(var ii = 0; ii < typeCount; ++ii) {
 														var tt = (gains[ii] * 60.0 - 1) * 100.0 / diffSec - bias[ii];
 
-														incomingStr[ii] =( Math.abs(tt) < 99 ? Math.abs(tt).toString() : "99") + "%";
+														incomingStr[ii] = Math.abs(tt).toString() + "%";
 														if(tt < 55 && tt > -5) {
-															var rr = tt >0 ? tt - Math.floor(tt / 5.0 + 0.25) * 5.0 : -tt;
+															var rr = tt - Math.floor(tt / 5.0 + 0.375) * 5.0;
+															if(rr < 0)
+																rr = -rr * 4.0;
 															if(Math.abs(rr) < bestError) {
 																bestError = Math.abs(rr);
 																foundType = true;
-																bestId = ii;
-															//	incomingStr[ii] = rr.toString() + "%!!";
+																incomingStr[ii] = rr.toString() + "%!!";
 															}
 														}
 
 													}
-														if( bestError < 3 )
-															incomingStr[bestId] = "0%!";
+
 													IncomingShip = (cont != cont2) ? "*" : "?";
 
 													if(!foundType) {
@@ -2522,7 +2445,7 @@
 												} catch(err) {
 													paError(err);
 												}
-												}
+											}
 											if((this.cities[item.tc] == 0) || (this.cities[item.c] == 0)) {
 												IncomingShip = "-";
 											}
@@ -2530,18 +2453,8 @@
 												for(var i = 0; i < typeCount; ++i)
 													incomingStr[i] = "?";
 											}
-											/*
-
-											 var columnNames = ["MG", "Internal", "Defender", "Target", "Cont", "Coords", "Time", "Attacker", "Alliance", "Source", // 10
-											 "AttCoords", "Spotted",
-											 "Baron", "Siege", "Infantry", "Cav", "Scout", "Ship", "allianceId", "Travel Time", "Attacker TS","Attacker Type, "Defender TS at Eta", "Defender TS Max", "Defender TS Mix];
-											 */
 											var isInternal = (mAid == item.a);
-											rowData.push([(item.m ? "webfrontend/world/icon_wm_city_moongate.png" : ""), (isInternal ? "Internal " : ""), item.tpn, item.tcn, cont, ava.CoordUtils.convertIdToCoodrinates(item.tc),
-												formatIncomingDate(this.serverTime.getStepTime(item.es)), item.pn, item.an, item.cn, ava.CoordUtils.convertIdToCoodrinates(item.c),
-												formatIncomingDate(this.serverTime.getStepTime(item.ds)), incomingStr[4],
-												incomingStr[3], incomingStr[2], incomingStr[1], incomingStr[0], IncomingShip, item.a.toString(), (besieged ? "~" : "") + FormatTime(travelDurationMs),
-												item.ta, "-", item.td, item.td, '-']);
+											rowData.push([(item.m ? "webfrontend/world/icon_wm_city_moongate.png" : ""), (isInternal ? "Internal " : ""), item.tpn, item.tcn, cont, ava.CoordUtils.convertIdToCoodrinates(item.tc), formatIncomingDate(this.serverTime.getStepTime(item.es)), item.pn, item.an, item.cn, ava.CoordUtils.convertIdToCoodrinates(item.c), formatIncomingDate(this.serverTime.getStepTime(item.ds)), incomingStr[4], incomingStr[3], incomingStr[2], incomingStr[1], incomingStr[0], IncomingShip, item.a.toString(), FormatTime(travelDurationMs)]);
 
 
 										}
@@ -2553,12 +2466,10 @@
 										this._table.sortByColumn(sortIx, dir);
 									}
 								}
-								}
+							}
 						} catch(ex1) {
 							paError(ex1);
 						}
-						console.log("redraw Grid leave");
-
 					},
 					safeGetProperty:      function(obj, prop) {
 						if(obj && obj.hasOwnProperty(prop))
@@ -2582,8 +2493,8 @@
 										break;
 									}
 								}
-								}
-							}
+							}
+						}
 						if(this.objData == "none" && this.worldData) {
 							for(var cluster in this.worldData.d) {
 								for(var key in this.worldData.d[cluster]) {
@@ -2604,7 +2515,7 @@
 								}
 								break;
 							}
-							}
+						}
 						console.log("WorldData");
 						console.log(this.playerData);
 						console.log(this.allianceData);
@@ -2640,13 +2551,13 @@
 											 console.dir(e);
 											 } */
 										}
-										}
-									}
-								}
+									}
+								}
+							}
 							if(distance != 0) {
 								break;
 							}
-							}
+						}
 						return distance;
 					},
 					isOnWater:            function(cityId, thisObj) {
@@ -2672,7 +2583,6 @@
 						if(results == null)
 							return;
 						var output = new qx.util.StringBuilder(2048);
-						console.log("dipatchResults");
 						try {
 							if(thisObj.cities == null) {
 								thisObj.cities = new Object();
@@ -2708,9 +2618,7 @@
 							thisObj._incomingAttacks = IncomingAttacks.slice(0);
 							var continents = "";
 							var hasChildren = thisObj._contSelect.hasChildren();
-							console.log("children" + hasChildren)
 							var children = thisObj._contSelect.getChildren();
-							console.log("childrenE" + children)
 							var sel = thisObj._contSelect.getSelection();
 							var ix = 0;
 							for(var i = 0; i < IncomingAttacks.length; ++i) {
@@ -2867,7 +2775,7 @@
 								} catch(ex1) {
 									paError(ex1);
 								}
-								}
+							}
 							thisObj._wcText.setValue(output.get());
 
 							//thisObj._table.setData(rowData);
@@ -2879,10 +2787,8 @@
 						 console.log("Error");
 						 console.dir(e);
 						 } */
-						console.log("dipatchResultsExit");
-
 					}
-					}
+				}
 			});
 			qx.Class.define("ava.ui.alerts", {
 				type:      "singleton",
@@ -2941,7 +2847,7 @@
 												send = true;
 											}
 										}
-										}
+									}
 									if(send) {
 										var re = new RegExp(oldPhrases, 'g');
 										var oldStr = oldPhrases.split('|');
@@ -2963,9 +2869,9 @@
 										var ts = webfrontend.Util.getDateTimeString(eO.getStepTime(eU), false, true) + ' ' + eN;
 										this.addChatAlertMessage(ts);
 									}
-									}
-								}
-							}
+								}
+							}
+						}
 					},
 					removeBBcode:        function(str) {
 						return str.replace(/\[\/?\w+\]/g, "");
@@ -3035,7 +2941,7 @@
 						}
 						qx.core.Init.getApplication().chat._outputMsg(eN, 'SYSTEM', 7);
 					}
-					}
+				}
 			});
 			qx.Class.define("ava.ui.RaidReporter", {
 				type:    "singleton",
@@ -3118,7 +3024,7 @@
 												itemImg.setScale(true);
 											}
 										}
-										}
+									}
 									if(fm.hasOwnProperty("a") && fm.a != null) {
 										for(var armyIndex = 0; armyIndex < fm.a.length; armyIndex++) {
 											var ku = 0;
@@ -3155,9 +3061,9 @@
 														dungCoords = ko.c[0].i;
 													}
 												}
-												}
-											}
-										}
+											}
+										}
+									}
 									var totalGain = resGain[0] + resGain[1] + resGain[2] + resGain[3] + resGain[4];
 									var totalLoss = resLoss[0] + resLoss[1] + resLoss[2] + resLoss[3] + resLoss[4];
 									var resOutput = new qx.ui.container.Composite();
@@ -3272,18 +3178,18 @@
 												info.n = 1;
 												info.l = maxLoot;
 												info.mx = maxLoot;
-													info.mn = maxLoot;
+												info.mn = maxLoot;
 												rw.dungeonLootInfo[dungCoords] = info;
 											}
 											rw.updateDungeonRaidInfo(dungCoords);
 										}
-										}
-									}
+									}
+								}
 								break;
 							}
-							}
-						}
-					}
+						}
+					}
+				}
 			});
 			qx.Class.define("ava.ui.LastLogin", {
 				type:      "singleton",
@@ -3421,15 +3327,15 @@
 							]);
 						}
 						if(rowData.length == 0) {
-								m.setData([
-									["No data."]
-								]);
+							m.setData([
+								["No data."]
+							]);
 						} else {
 							m.setData(rowData);
 							m.sortByColumn(4, true);
 						}
-						}
-					}
+					}
+				}
 			});
 
 			qx.Class.define("ava.ui.FillWithResourcesWindow", {
@@ -3477,13 +3383,13 @@
 					this.moveTo(400, 200);
 
 					var app = qx.core.Init.getApplication();
-						var cv = (app.cityDetailView || app.getCityDetailView());
+					var cv = (app.cityDetailView || app.getCityDetailView());
 					if(!cv.hasOwnProperty("originalSetCity1")) {
 						cv.originalSetCity1 = cv.setCity;
 						cv.fill = this;
 						cv.setCity = this.interceptSetCity;
 					}
-					},
+				},
 				members:   {
 					WOOD:                         1,
 					STONE:                        2,
@@ -3821,7 +3727,7 @@
 					},
 					_updateSendingProgress:       function() {
 					}
-					}
+				}
 			});
 
 			var distWantModifier = 0.675;
@@ -4878,1029 +4784,1029 @@
 								[1386450, 1335720]
 							]
 						],
-							[
-								[
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1],
-									[-1, -1]
-								],
-								[
-									[690, 690],
-									[703, 702],
-									[715, 712],
-									[729, 725],
-									[742, 737],
-									[755, 749],
-									[769, 761],
-									[783, 774],
-									[797, 787],
-									[811, 799],
-									[825, 812],
-									[839, 824],
-									[853, 837],
-									[867, 849],
-									[881, 862],
-									[895, 875],
-									[908, 887],
-									[922, 899],
-									[936, 912],
-									[950, 924],
-									[964, 937],
-									[978, 950],
-									[992, 962],
-									[1006, 975],
-									[1020, 987],
-									[1034, 1000],
-									[1048, 1012],
-									[1062, 1025],
-									[1076, 1038],
-									[1090, 1050],
-									[1104, 1063],
-									[1118, 1075],
-									[1132, 1088],
-									[1145, 1100],
-									[1159, 1113],
-									[1173, 1125],
-									[1187, 1137],
-									[1201, 1150],
-									[1215, 1163],
-									[1229, 1175],
-									[1243, 1188],
-									[1257, 1200],
-									[1271, 1213],
-									[1285, 1226],
-									[1299, 1238],
-									[1313, 1251],
-									[1327, 1263],
-									[1341, 1276],
-									[1355, 1289],
-									[1368, 1301],
-									[1358, 1297],
-									[1341, 1288],
-									[1322, 1278],
-									[1400, 1334],
-									[1396, 1334],
-									[1386, 1330],
-									[1363, 1317],
-									[1450, 1380],
-									[1476, 1401],
-									[1501, 1421],
-									[1519, 1436],
-									[1536, 1451],
-									[1550, 1464],
-									[1564, 1476],
-									[1578, 1489],
-									[1592, 1502],
-									[1605, 1514],
-									[1619, 1527],
-									[1633, 1539],
-									[1647, 1552],
-									[1661, 1564],
-									[1675, 1577],
-									[1689, 1589],
-									[1703, 1602],
-									[1717, 1615],
-									[1731, 1627],
-									[1745, 1640],
-									[1759, 1652],
-									[1773, 1665],
-									[1787, 1677],
-									[1801, 1690],
-									[1815, 1703],
-									[1828, 1715],
-									[1842, 1727],
-									[1798, 1695],
-									[1741, 1652],
-									[1674, 1602],
-									[1770, 1677],
-									[1728, 1644],
-									[1671, 1600],
-									[1863, 1754],
-									[1909, 1791],
-									[1950, 1825],
-									[1974, 1846],
-									[1976, 1860],
-									[1972, 1873],
-									[1966, 1885],
-									[2025, 1904],
-									[2070, 1931],
-									[2070, 1931]
-								],
-								[
-									[2970, 2835],
-									[3060, 3060],
-									[2988, 2917],
-									[2971, 2915],
-									[3051, 2964],
-									[3031, 2953],
-									[2922, 2870],
-									[3058, 2989],
-									[2945, 2900],
-									[3109, 3046],
-									[3078, 3027],
-									[3381, 3300],
-									[3476, 3393],
-									[3563, 3477],
-									[3626, 3541],
-									[3681, 3599],
-									[3732, 3654],
-									[3782, 3707],
-									[3831, 3759],
-									[3802, 3741],
-									[3757, 3707],
-									[3699, 3662],
-									[3942, 3892],
-									[4022, 3973],
-									[4099, 4051],
-									[4157, 4112],
-									[4210, 4167],
-									[4261, 4221],
-									[4310, 4274],
-									[4359, 4326],
-									[4407, 4378],
-									[4348, 4324],
-									[4266, 4248],
-									[4165, 4154],
-									[4487, 4474],
-									[4578, 4569],
-									[4666, 4659],
-									[4729, 4725],
-									[4787, 4783],
-									[4844, 4839],
-									[4900, 4892],
-									[4955, 4944],
-									[5010, 4996],
-									[5065, 5048],
-									[5096, 5078],
-									[5072, 5058],
-									[5033, 5024],
-									[5083, 5068],
-									[5274, 5244],
-									[5359, 5323],
-									[5435, 5394],
-									[5422, 5382],
-									[5341, 5311],
-									[5235, 5217],
-									[5428, 5400],
-									[5630, 5580],
-									[5734, 5675],
-									[5816, 5750],
-									[5881, 5811],
-									[5942, 5868],
-									[5999, 5922],
-									[6056, 5975],
-									[6112, 6027],
-									[6167, 6078],
-									[6222, 6130],
-									[6277, 6182],
-									[6333, 6233],
-									[6388, 6285],
-									[6443, 6336],
-									[6498, 6388],
-									[6553, 6439],
-									[6608, 6491],
-									[6663, 6542],
-									[6588, 6453],
-									[6484, 6331],
-									[6188, 6033],
-									[6370, 6257],
-									[6244, 6153],
-									[6782, 6653],
-									[6925, 6787],
-									[7053, 6907],
-									[7134, 6983],
-									[7131, 6993],
-									[7104, 6984],
-									[7062, 6964],
-									[7302, 7155],
-									[7313, 7174],
-									[7305, 7180],
-									[7267, 7163],
-									[7518, 7359],
-									[7607, 7434],
-									[7690, 7507],
-									[7755, 7566],
-									[7815, 7621],
-									[7873, 7675],
-									[7930, 7727],
-									[7990, 7784],
-									[8054, 7843],
-									[8154, 7937],
-									[8154, 7937]
-								],
-								[
-									[9990, 9378],
-									[9840, 9840],
-									[9864, 9600],
-									[10078, 9697],
-									[9976, 9608],
-									[9660, 9370],
-									[10299, 9865],
-									[10347, 9915],
-									[11035, 10534],
-									[11300, 10791],
-									[11543, 11030],
-									[11734, 11226],
-									[11911, 11410],
-									[12079, 11586],
-									[12244, 11759],
-									[12406, 11930],
-									[12569, 12102],
-									[12731, 12273],
-									[12893, 12444],
-									[13053, 12614],
-									[13215, 12785],
-									[13106, 12729],
-									[12936, 12622],
-									[12722, 12479],
-									[13442, 13124],
-									[13551, 13259],
-									[13627, 13369],
-									[14169, 13838],
-									[14406, 14068],
-									[14627, 14286],
-									[14542, 14241],
-									[14310, 14095],
-									[14012, 13897],
-									[14435, 14318],
-									[14168, 14028],
-									[13595, 13520],
-									[14149, 14025],
-									[15367, 15150],
-									[15807, 15570],
-									[16064, 15845],
-									[16193, 16009],
-									[16273, 16132],
-									[16450, 16272],
-									[16236, 16107],
-									[15947, 15877],
-									[16456, 16361],
-									[17032, 16896],
-									[16965, 16862],
-									[16761, 16705],
-									[16767, 16690],
-									[17700, 17574],
-									[18015, 17882],
-									[18297, 18163],
-									[18502, 18373],
-									[18687, 18565],
-									[18857, 18744],
-									[19023, 18919],
-									[19187, 19091],
-									[19349, 19262],
-									[19512, 19434],
-									[19674, 19605],
-									[19835, 19775],
-									[19997, 19946],
-									[20158, 20117],
-									[20320, 20288],
-									[20287, 20265],
-									[20212, 20198],
-									[19643, 19637],
-									[19743, 19736],
-									[19356, 19346],
-									[20796, 20774],
-									[20950, 20924],
-									[21020, 20991],
-									[20928, 20898],
-									[21766, 21713],
-									[22062, 21998],
-									[22161, 22096],
-									[22156, 22095],
-									[21892, 21849],
-									[22276, 22211],
-									[22237, 22176],
-									[23035, 22929],
-									[23328, 23206],
-									[23601, 23465],
-									[23888, 23760],
-									[24227, 24131],
-									[24574, 24374],
-									[24244, 23860],
-									[23788, 23164],
-									[23401, 23150],
-									[24195, 23956],
-									[23921, 23769],
-									[23611, 23550],
-									[24545, 24487],
-									[25464, 25360],
-									[25419, 25250],
-									[25390, 25224],
-									[25259, 25108],
-									[26542, 26258],
-									[26542, 26258]
-								],
-								[
-									[31410, 28396],
-									[32790, 29411],
-									[31479, 29157],
-									[30828, 29045],
-									[32639, 30205],
-									[32826, 30438],
-									[32424, 30434],
-									[31712, 30274],
-									[33379, 31452],
-									[34298, 32125],
-									[34022, 32113],
-									[34466, 32427],
-									[33808, 32622],
-									[33767, 32753],
-									[33132, 31828],
-									[34956, 32975],
-									[34952, 33408],
-									[33097, 32271],
-									[34084, 33205],
-									[35102, 34028],
-									[34618, 34281],
-									[35075, 34850],
-									[37385, 36924],
-									[38544, 37702],
-									[40497, 39323],
-									[40073, 39719],
-									[39941, 39732],
-									[40784, 40698],
-									[40168, 39966],
-									[42031, 41656],
-									[41844, 40781],
-									[43110, 41879],
-									[43852, 42031],
-									[43318, 42475],
-									[45235, 44106],
-									[46359, 44538],
-									[45835, 44296],
-									[47395, 45816],
-									[46485, 45522],
-									[46840, 45707],
-									[46582, 45724],
-									[46088, 45771],
-									[46791, 46332],
-									[48698, 47657],
-									[50963, 49166],
-									[50469, 48873],
-									[50842, 50036],
-									[49292, 48556],
-									[50109, 49855],
-									[50205, 50067],
-									[51380, 51321],
-									[52582, 52263],
-									[53680, 52738],
-									[54120, 52437],
-									[55695, 53946],
-									[54966, 53548],
-									[55847, 53547],
-									[56011, 54237],
-									[56189, 53579],
-									[56632, 55055],
-									[57935, 56276],
-									[56673, 55849],
-									[56050, 55646],
-									[57917, 57390],
-									[56646, 55829],
-									[58919, 57861],
-									[57540, 56945],
-									[60484, 59427],
-									[64009, 62095],
-									[65459, 63309],
-									[66512, 64219],
-									[66837, 64758],
-									[67177, 65364],
-									[67442, 65945],
-									[69045, 67085],
-									[68834, 67182],
-									[69029, 67662],
-									[70209, 68161],
-									[70832, 68669],
-									[70289, 68288],
-									[69422, 67707],
-									[68634, 66832],
-									[71353, 68620],
-									[71258, 68390],
-									[69383, 68280],
-									[71958, 70818],
-									[71524, 70158],
-									[71541, 70357],
-									[70023, 69360],
-									[72996, 72220],
-									[76730, 75143],
-									[79122, 77246],
-									[80453, 77582],
-									[78052, 76469],
-									[76033, 75200],
-									[73655, 72399],
-									[76354, 74114],
-									[79211, 76141],
-									[81666, 79508],
-									[81666, 79508]
-								],
-								[
-									[72150, 62745],
-									[71580, 65594],
-									[70122, 64150],
-									[72488, 65902],
-									[72167, 66872],
-									[70873, 66606],
-									[70106, 67454],
-									[69416, 67732],
-									[71800, 69316],
-									[73346, 69597],
-									[76113, 72200],
-									[76934, 73490],
-									[77509, 72721],
-									[73898, 71076],
-									[76393, 72836],
-									[77642, 73777],
-									[77912, 74597],
-									[83166, 78625],
-									[82859, 79247],
-									[85301, 81830],
-									[86659, 80960],
-									[90887, 84468],
-									[90823, 85467],
-									[91590, 87462],
-									[93798, 87831],
-									[92049, 88028],
-									[95764, 90854],
-									[94373, 91709],
-									[96679, 93288],
-									[101653, 96358],
-									[100838, 97552],
-									[100406, 95351],
-									[101545, 96640],
-									[106456, 98636],
-									[105942, 98736],
-									[102908, 97908],
-									[103275, 99703],
-									[103416, 100912],
-									[107339, 104077],
-									[110891, 106425],
-									[107986, 106630],
-									[105802, 103839],
-									[108601, 105683],
-									[112300, 107937],
-									[110532, 108064],
-									[114671, 110225],
-									[118901, 111920],
-									[118299, 111505],
-									[119796, 113283],
-									[123921, 115090],
-									[123867, 117468],
-									[122182, 118270],
-									[123869, 119430],
-									[124628, 119337],
-									[121497, 118048],
-									[122644, 118018],
-									[127180, 120955],
-									[124289, 119359],
-									[130969, 122961],
-									[128399, 121491],
-									[132604, 124865],
-									[132888, 127860],
-									[138820, 132968],
-									[139812, 136682],
-									[144251, 139759],
-									[147168, 139315],
-									[149721, 141320],
-									[152735, 146297],
-									[155812, 152206],
-									[155320, 151321],
-									[156127, 149867],
-									[157662, 152083],
-									[157518, 148024],
-									[158980, 148610],
-									[161105, 149546],
-									[159759, 148800],
-									[158245, 148925],
-									[155110, 151035],
-									[159515, 155125],
-									[163217, 159250],
-									[160026, 154362],
-									[157858, 155185],
-									[161650, 158509],
-									[166125, 162931],
-									[166437, 161438],
-									[170273, 164241],
-									[171249, 167922],
-									[171083, 167527],
-									[167712, 165255],
-									[168288, 163865],
-									[172980, 164756],
-									[174049, 165158],
-									[178031, 167312],
-									[179813, 168597],
-									[181430, 169882],
-									[182763, 171071],
-									[184147, 172365],
-									[185509, 173672],
-									[187590, 175685],
-									[187590, 175685]
-								],
-								[
-									[145710, 127730],
-									[140070, 126769],
-									[144371, 130483],
-									[144207, 130695],
-									[146255, 132804],
-									[146665, 134693],
-									[146795, 137116],
-									[143822, 136576],
-									[148042, 138368],
-									[148800, 141032],
-									[150498, 141711],
-									[149642, 141583],
-									[150211, 144438],
-									[156875, 149117],
-									[157527, 152442],
-									[156813, 152040],
-									[159172, 156134],
-									[165871, 161840],
-									[170659, 163448],
-									[169844, 164317],
-									[167378, 160132],
-									[164127, 161902],
-									[170705, 168108],
-									[178973, 173999],
-									[180128, 169853],
-									[187498, 174142],
-									[193295, 179362],
-									[196368, 183399],
-									[195268, 184526],
-									[207634, 193285],
-									[210539, 197725],
-									[209742, 200356],
-									[210523, 199238],
-									[201932, 196230],
-									[200750, 198229],
-									[195568, 194057],
-									[207282, 203569],
-									[218282, 209060],
-									[228606, 212521],
-									[230939, 214089],
-									[227960, 213556],
-									[230049, 216383],
-									[225688, 216744],
-									[236271, 226305],
-									[233449, 230240],
-									[231414, 229433],
-									[230423, 227134],
-									[235372, 227421],
-									[246151, 233154],
-									[245367, 232888],
-									[241152, 230529],
-									[256080, 239515],
-									[258987, 241433],
-									[267397, 248504],
-									[271160, 251838],
-									[271990, 252690],
-									[271654, 252576],
-									[271994, 255361],
-									[283687, 268426],
-									[287394, 276595],
-									[288272, 273521],
-									[285192, 275009],
-									[297038, 282194],
-									[291670, 279609],
-									[296385, 280902],
-									[296706, 283534],
-									[299131, 291097],
-									[303994, 292761],
-									[315149, 305951],
-									[309924, 297918],
-									[299318, 293641],
-									[294709, 286389],
-									[310548, 296340],
-									[315072, 301206],
-									[318195, 306689],
-									[320608, 314137],
-									[324046, 314351],
-									[326545, 309898],
-									[328210, 311049],
-									[329587, 312929],
-									[332009, 319492],
-									[336885, 323083],
-									[337278, 328224],
-									[334005, 322438],
-									[331121, 322983],
-									[340180, 329089],
-									[346011, 335715],
-									[346311, 342791],
-									[343086, 340190],
-									[335322, 330022],
-									[344729, 333338],
-									[354913, 337817],
-									[359791, 340729],
-									[364843, 344581],
-									[369343, 348469],
-									[372247, 353324],
-									[369932, 354017],
-									[370078, 357371],
-									[378846, 357643],
-									[378846, 357643]
-								],
-								[
-									[258540, 227156],
-									[249240, 230153],
-									[261488, 236793],
-									[260876, 238118],
-									[260779, 238515],
-									[264906, 243864],
-									[268628, 246620],
-									[273111, 250992],
-									[275097, 252534],
-									[273836, 253411],
-									[269533, 255038],
-									[275436, 260915],
-									[279053, 261725],
-									[279384, 264317],
-									[274154, 265831],
-									[283966, 270899],
-									[301940, 281602],
-									[316956, 295582],
-									[316548, 300568],
-									[311680, 294320],
-									[306369, 291714],
-									[315489, 295940],
-									[323445, 302232],
-									[331389, 309774],
-									[340846, 320402],
-									[341632, 324343],
-									[347007, 336355],
-									[349151, 340812],
-									[347876, 341738],
-									[354072, 344913],
-									[364209, 349982],
-									[366434, 345181],
-									[375584, 351389],
-									[377136, 351528],
-									[369629, 351840],
-									[385742, 365158],
-									[386872, 370706],
-									[389352, 375787],
-									[391922, 375606],
-									[403010, 386323],
-									[417986, 390789],
-									[419262, 392446],
-									[416741, 393905],
-									[417678, 393727],
-									[429614, 404720],
-									[428090, 405554],
-									[423179, 405864],
-									[436625, 410361],
-									[439079, 412515],
-									[440200, 413374],
-									[451790, 430293],
-									[471884, 449564],
-									[487167, 470323],
-									[484845, 465768],
-									[516205, 483151],
-									[522808, 488230],
-									[533592, 496995],
-									[531086, 504807],
-									[529870, 503512],
-									[536445, 510052],
-									[544713, 508752],
-									[539450, 507386],
-									[531600, 501479],
-									[534760, 506015],
-									[543376, 512706],
-									[543131, 519624],
-									[532167, 519846],
-									[532948, 520257],
-									[522783, 511311],
-									[545611, 525305],
-									[548746, 524354],
-									[549672, 525353],
-									[539701, 520255],
-									[553100, 530676],
-									[551982, 541695],
-									[556419, 539853],
-									[574787, 550703],
-									[582987, 554501],
-									[575104, 554528],
-									[589189, 562223],
-									[593549, 570852],
-									[586992, 568597],
-									[586402, 562258],
-									[579435, 557618],
-									[575985, 560483],
-									[597593, 577412],
-									[612490, 588463],
-									[625331, 597910],
-									[636646, 595656],
-									[625469, 592591],
-									[619053, 592009],
-									[603071, 587103],
-									[617444, 602726],
-									[609112, 597369],
-									[627426, 611200],
-									[621712, 600676],
-									[646196, 608305],
-									[666435, 624376],
-									[672204, 636036],
-									[672204, 636036]
-								],
-								[
-									[428430, 370853],
-									[419670, 373273],
-									[426662, 381635],
-									[431352, 384942],
-									[431378, 385825],
-									[432531, 389181],
-									[433143, 393249],
-									[439538, 398137],
-									[448237, 402754],
-									[457258, 407415],
-									[459156, 410786],
-									[460132, 416257],
-									[471887, 428306],
-									[487026, 437487],
-									[497560, 446644],
-									[506570, 454565],
-									[509542, 462047],
-									[511843, 467453],
-									[515373, 470645],
-									[517025, 474310],
-									[531752, 485823],
-									[551939, 498533],
-									[564951, 511734],
-									[564948, 520289],
-									[567245, 520761],
-									[570058, 522621],
-									[581542, 531409],
-									[598736, 542385],
-									[600545, 548790],
-									[605240, 556574],
-									[607854, 557672],
-									[618284, 566943],
-									[628603, 570867],
-									[628852, 575625],
-									[624468, 580764],
-									[617939, 578101],
-									[617410, 578831],
-									[623700, 585206],
-									[654577, 602115],
-									[665006, 611523],
-									[673682, 615225],
-									[672685, 621843],
-									[685634, 634440],
-									[718296, 664528],
-									[759770, 689841],
-									[775566, 711870],
-									[782975, 718029],
-									[793308, 725070],
-									[796268, 738206],
-									[807724, 754367],
-									[833366, 776146],
-									[851929, 775989],
-									[860615, 778039],
-									[857288, 774788],
-									[846961, 776490],
-									[838022, 775328],
-									[852692, 787752],
-									[868791, 800842],
-									[861979, 803808],
-									[862188, 800473],
-									[843629, 801044],
-									[854989, 810280],
-									[846878, 807305],
-									[865805, 817357],
-									[887740, 827375],
-									[914472, 835929],
-									[923173, 842036],
-									[926047, 853638],
-									[914561, 859298],
-									[920235, 857584],
-									[903520, 850133],
-									[923978, 860354],
-									[931475, 867511],
-									[925158, 867772],
-									[932749, 883989],
-									[950076, 908216],
-									[943870, 907505],
-									[931448, 894375],
-									[964690, 905548],
-									[977741, 922290],
-									[994629, 949955],
-									[1003301, 968944],
-									[993584, 947871],
-									[985230, 933555],
-									[988968, 940311],
-									[977098, 944041],
-									[1005972, 960242],
-									[1017161, 965089],
-									[1019684, 975408],
-									[1009552, 969064],
-									[1011257, 977525],
-									[1015073, 983210],
-									[1047988, 996586],
-									[1052590, 1005194],
-									[1041338, 990914],
-									[1052111, 1005714],
-									[1096654, 1022537],
-									[1102263, 1025920],
-									[1113918, 1038388],
-									[1113918, 1038388]
-								],
-								[
-									[656160, 582434],
-									[579390, 535504],
-									[615839, 576340],
-									[631357, 588023],
-									[657902, 609625],
-									[651402, 613625],
-									[657924, 619713],
-									[653784, 607233],
-									[662378, 616073],
-									[708418, 649532],
-									[711964, 653876],
-									[729296, 670121],
-									[702157, 659912],
-									[691110, 666931],
-									[719991, 693491],
-									[781600, 740155],
-									[796464, 765542],
-									[802766, 761966],
-									[796893, 769165],
-									[813642, 786468],
-									[828058, 794264],
-									[815045, 804123],
-									[809163, 793965],
-									[864091, 833627],
-									[893752, 835898],
-									[913516, 847869],
-									[917386, 854920],
-									[916624, 861956],
-									[902521, 866137],
-									[928490, 881368],
-									[922390, 888120],
-									[943581, 899461],
-									[935636, 903967],
-									[951560, 914874],
-									[997940, 936774],
-									[1017085, 949911],
-									[1033562, 962324],
-									[1046421, 973602],
-									[1059191, 984732],
-									[1071537, 995702],
-									[1085381, 1016484],
-									[1092072, 1043556],
-									[1110070, 1091633],
-									[1135305, 1115720],
-									[1181790, 1146925],
-									[1197503, 1140750],
-									[1190137, 1140576],
-									[1209994, 1167859],
-									[1194087, 1126266],
-									[1211389, 1143635],
-									[1221512, 1164146],
-									[1181985, 1161709],
-									[1164626, 1145465],
-									[1189317, 1157961],
-									[1217612, 1158822],
-									[1233713, 1167461],
-									[1247505, 1176536],
-									[1242971, 1178405],
-									[1236148, 1187848],
-									[1226778, 1198172],
-									[1282417, 1242204],
-									[1294695, 1232817],
-									[1310675, 1242683],
-									[1307169, 1243701],
-									[1299744, 1244891],
-									[1289284, 1245137],
-									[1345154, 1279194],
-									[1368953, 1299083],
-									[1392995, 1319581],
-									[1391623, 1317703],
-									[1401059, 1326622],
-									[1410073, 1335455],
-									[1420194, 1345470],
-									[1410758, 1344295],
-									[1397098, 1340765],
-									[1380327, 1335469],
-									[1441424, 1375284],
-									[1467426, 1391542],
-									[1494282, 1407577],
-									[1517429, 1420947],
-									[1510967, 1429941],
-									[1500381, 1430022],
-									[1466536, 1416915],
-									[1427064, 1399887],
-									[1452494, 1424276],
-									[1511552, 1468928],
-									[1525621, 1487703],
-									[1557653, 1502204],
-									[1555453, 1512999],
-									[1557712, 1533775],
-									[1555642, 1520577],
-									[1604274, 1543761],
-									[1621920, 1554506],
-									[1638316, 1566530],
-									[1650989, 1577455],
-									[1662698, 1588280],
-									[1674955, 1600135],
-									[1687228, 1612209],
-									[1706015, 1630814],
-									[1706015, 1630814]
-								]
-							]
-						],
+						[
+							[
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1],
+								[-1, -1]
+							],
+							[
+								[690, 690],
+								[703, 702],
+								[715, 712],
+								[729, 725],
+								[742, 737],
+								[755, 749],
+								[769, 761],
+								[783, 774],
+								[797, 787],
+								[811, 799],
+								[825, 812],
+								[839, 824],
+								[853, 837],
+								[867, 849],
+								[881, 862],
+								[895, 875],
+								[908, 887],
+								[922, 899],
+								[936, 912],
+								[950, 924],
+								[964, 937],
+								[978, 950],
+								[992, 962],
+								[1006, 975],
+								[1020, 987],
+								[1034, 1000],
+								[1048, 1012],
+								[1062, 1025],
+								[1076, 1038],
+								[1090, 1050],
+								[1104, 1063],
+								[1118, 1075],
+								[1132, 1088],
+								[1145, 1100],
+								[1159, 1113],
+								[1173, 1125],
+								[1187, 1137],
+								[1201, 1150],
+								[1215, 1163],
+								[1229, 1175],
+								[1243, 1188],
+								[1257, 1200],
+								[1271, 1213],
+								[1285, 1226],
+								[1299, 1238],
+								[1313, 1251],
+								[1327, 1263],
+								[1341, 1276],
+								[1355, 1289],
+								[1368, 1301],
+								[1358, 1297],
+								[1341, 1288],
+								[1322, 1278],
+								[1400, 1334],
+								[1396, 1334],
+								[1386, 1330],
+								[1363, 1317],
+								[1450, 1380],
+								[1476, 1401],
+								[1501, 1421],
+								[1519, 1436],
+								[1536, 1451],
+								[1550, 1464],
+								[1564, 1476],
+								[1578, 1489],
+								[1592, 1502],
+								[1605, 1514],
+								[1619, 1527],
+								[1633, 1539],
+								[1647, 1552],
+								[1661, 1564],
+								[1675, 1577],
+								[1689, 1589],
+								[1703, 1602],
+								[1717, 1615],
+								[1731, 1627],
+								[1745, 1640],
+								[1759, 1652],
+								[1773, 1665],
+								[1787, 1677],
+								[1801, 1690],
+								[1815, 1703],
+								[1828, 1715],
+								[1842, 1727],
+								[1798, 1695],
+								[1741, 1652],
+								[1674, 1602],
+								[1770, 1677],
+								[1728, 1644],
+								[1671, 1600],
+								[1863, 1754],
+								[1909, 1791],
+								[1950, 1825],
+								[1974, 1846],
+								[1976, 1860],
+								[1972, 1873],
+								[1966, 1885],
+								[2025, 1904],
+								[2070, 1931],
+								[2070, 1931]
+							],
+							[
+								[2970, 2835],
+								[3060, 3060],
+								[2988, 2917],
+								[2971, 2915],
+								[3051, 2964],
+								[3031, 2953],
+								[2922, 2870],
+								[3058, 2989],
+								[2945, 2900],
+								[3109, 3046],
+								[3078, 3027],
+								[3381, 3300],
+								[3476, 3393],
+								[3563, 3477],
+								[3626, 3541],
+								[3681, 3599],
+								[3732, 3654],
+								[3782, 3707],
+								[3831, 3759],
+								[3802, 3741],
+								[3757, 3707],
+								[3699, 3662],
+								[3942, 3892],
+								[4022, 3973],
+								[4099, 4051],
+								[4157, 4112],
+								[4210, 4167],
+								[4261, 4221],
+								[4310, 4274],
+								[4359, 4326],
+								[4407, 4378],
+								[4348, 4324],
+								[4266, 4248],
+								[4165, 4154],
+								[4487, 4474],
+								[4578, 4569],
+								[4666, 4659],
+								[4729, 4725],
+								[4787, 4783],
+								[4844, 4839],
+								[4900, 4892],
+								[4955, 4944],
+								[5010, 4996],
+								[5065, 5048],
+								[5096, 5078],
+								[5072, 5058],
+								[5033, 5024],
+								[5083, 5068],
+								[5274, 5244],
+								[5359, 5323],
+								[5435, 5394],
+								[5422, 5382],
+								[5341, 5311],
+								[5235, 5217],
+								[5428, 5400],
+								[5630, 5580],
+								[5734, 5675],
+								[5816, 5750],
+								[5881, 5811],
+								[5942, 5868],
+								[5999, 5922],
+								[6056, 5975],
+								[6112, 6027],
+								[6167, 6078],
+								[6222, 6130],
+								[6277, 6182],
+								[6333, 6233],
+								[6388, 6285],
+								[6443, 6336],
+								[6498, 6388],
+								[6553, 6439],
+								[6608, 6491],
+								[6663, 6542],
+								[6588, 6453],
+								[6484, 6331],
+								[6188, 6033],
+								[6370, 6257],
+								[6244, 6153],
+								[6782, 6653],
+								[6925, 6787],
+								[7053, 6907],
+								[7134, 6983],
+								[7131, 6993],
+								[7104, 6984],
+								[7062, 6964],
+								[7302, 7155],
+								[7313, 7174],
+								[7305, 7180],
+								[7267, 7163],
+								[7518, 7359],
+								[7607, 7434],
+								[7690, 7507],
+								[7755, 7566],
+								[7815, 7621],
+								[7873, 7675],
+								[7930, 7727],
+								[7990, 7784],
+								[8054, 7843],
+								[8154, 7937],
+								[8154, 7937]
+							],
+							[
+								[9990, 9378],
+								[9840, 9840],
+								[9864, 9600],
+								[10078, 9697],
+								[9976, 9608],
+								[9660, 9370],
+								[10299, 9865],
+								[10347, 9915],
+								[11035, 10534],
+								[11300, 10791],
+								[11543, 11030],
+								[11734, 11226],
+								[11911, 11410],
+								[12079, 11586],
+								[12244, 11759],
+								[12406, 11930],
+								[12569, 12102],
+								[12731, 12273],
+								[12893, 12444],
+								[13053, 12614],
+								[13215, 12785],
+								[13106, 12729],
+								[12936, 12622],
+								[12722, 12479],
+								[13442, 13124],
+								[13551, 13259],
+								[13627, 13369],
+								[14169, 13838],
+								[14406, 14068],
+								[14627, 14286],
+								[14542, 14241],
+								[14310, 14095],
+								[14012, 13897],
+								[14435, 14318],
+								[14168, 14028],
+								[13595, 13520],
+								[14149, 14025],
+								[15367, 15150],
+								[15807, 15570],
+								[16064, 15845],
+								[16193, 16009],
+								[16273, 16132],
+								[16450, 16272],
+								[16236, 16107],
+								[15947, 15877],
+								[16456, 16361],
+								[17032, 16896],
+								[16965, 16862],
+								[16761, 16705],
+								[16767, 16690],
+								[17700, 17574],
+								[18015, 17882],
+								[18297, 18163],
+								[18502, 18373],
+								[18687, 18565],
+								[18857, 18744],
+								[19023, 18919],
+								[19187, 19091],
+								[19349, 19262],
+								[19512, 19434],
+								[19674, 19605],
+								[19835, 19775],
+								[19997, 19946],
+								[20158, 20117],
+								[20320, 20288],
+								[20287, 20265],
+								[20212, 20198],
+								[19643, 19637],
+								[19743, 19736],
+								[19356, 19346],
+								[20796, 20774],
+								[20950, 20924],
+								[21020, 20991],
+								[20928, 20898],
+								[21766, 21713],
+								[22062, 21998],
+								[22161, 22096],
+								[22156, 22095],
+								[21892, 21849],
+								[22276, 22211],
+								[22237, 22176],
+								[23035, 22929],
+								[23328, 23206],
+								[23601, 23465],
+								[23888, 23760],
+								[24227, 24131],
+								[24574, 24374],
+								[24244, 23860],
+								[23788, 23164],
+								[23401, 23150],
+								[24195, 23956],
+								[23921, 23769],
+								[23611, 23550],
+								[24545, 24487],
+								[25464, 25360],
+								[25419, 25250],
+								[25390, 25224],
+								[25259, 25108],
+								[26542, 26258],
+								[26542, 26258]
+							],
+							[
+								[31410, 28396],
+								[32790, 29411],
+								[31479, 29157],
+								[30828, 29045],
+								[32639, 30205],
+								[32826, 30438],
+								[32424, 30434],
+								[31712, 30274],
+								[33379, 31452],
+								[34298, 32125],
+								[34022, 32113],
+								[34466, 32427],
+								[33808, 32622],
+								[33767, 32753],
+								[33132, 31828],
+								[34956, 32975],
+								[34952, 33408],
+								[33097, 32271],
+								[34084, 33205],
+								[35102, 34028],
+								[34618, 34281],
+								[35075, 34850],
+								[37385, 36924],
+								[38544, 37702],
+								[40497, 39323],
+								[40073, 39719],
+								[39941, 39732],
+								[40784, 40698],
+								[40168, 39966],
+								[42031, 41656],
+								[41844, 40781],
+								[43110, 41879],
+								[43852, 42031],
+								[43318, 42475],
+								[45235, 44106],
+								[46359, 44538],
+								[45835, 44296],
+								[47395, 45816],
+								[46485, 45522],
+								[46840, 45707],
+								[46582, 45724],
+								[46088, 45771],
+								[46791, 46332],
+								[48698, 47657],
+								[50963, 49166],
+								[50469, 48873],
+								[50842, 50036],
+								[49292, 48556],
+								[50109, 49855],
+								[50205, 50067],
+								[51380, 51321],
+								[52582, 52263],
+								[53680, 52738],
+								[54120, 52437],
+								[55695, 53946],
+								[54966, 53548],
+								[55847, 53547],
+								[56011, 54237],
+								[56189, 53579],
+								[56632, 55055],
+								[57935, 56276],
+								[56673, 55849],
+								[56050, 55646],
+								[57917, 57390],
+								[56646, 55829],
+								[58919, 57861],
+								[57540, 56945],
+								[60484, 59427],
+								[64009, 62095],
+								[65459, 63309],
+								[66512, 64219],
+								[66837, 64758],
+								[67177, 65364],
+								[67442, 65945],
+								[69045, 67085],
+								[68834, 67182],
+								[69029, 67662],
+								[70209, 68161],
+								[70832, 68669],
+								[70289, 68288],
+								[69422, 67707],
+								[68634, 66832],
+								[71353, 68620],
+								[71258, 68390],
+								[69383, 68280],
+								[71958, 70818],
+								[71524, 70158],
+								[71541, 70357],
+								[70023, 69360],
+								[72996, 72220],
+								[76730, 75143],
+								[79122, 77246],
+								[80453, 77582],
+								[78052, 76469],
+								[76033, 75200],
+								[73655, 72399],
+								[76354, 74114],
+								[79211, 76141],
+								[81666, 79508],
+								[81666, 79508]
+							],
+							[
+								[72150, 62745],
+								[71580, 65594],
+								[70122, 64150],
+								[72488, 65902],
+								[72167, 66872],
+								[70873, 66606],
+								[70106, 67454],
+								[69416, 67732],
+								[71800, 69316],
+								[73346, 69597],
+								[76113, 72200],
+								[76934, 73490],
+								[77509, 72721],
+								[73898, 71076],
+								[76393, 72836],
+								[77642, 73777],
+								[77912, 74597],
+								[83166, 78625],
+								[82859, 79247],
+								[85301, 81830],
+								[86659, 80960],
+								[90887, 84468],
+								[90823, 85467],
+								[91590, 87462],
+								[93798, 87831],
+								[92049, 88028],
+								[95764, 90854],
+								[94373, 91709],
+								[96679, 93288],
+								[101653, 96358],
+								[100838, 97552],
+								[100406, 95351],
+								[101545, 96640],
+								[106456, 98636],
+								[105942, 98736],
+								[102908, 97908],
+								[103275, 99703],
+								[103416, 100912],
+								[107339, 104077],
+								[110891, 106425],
+								[107986, 106630],
+								[105802, 103839],
+								[108601, 105683],
+								[112300, 107937],
+								[110532, 108064],
+								[114671, 110225],
+								[118901, 111920],
+								[118299, 111505],
+								[119796, 113283],
+								[123921, 115090],
+								[123867, 117468],
+								[122182, 118270],
+								[123869, 119430],
+								[124628, 119337],
+								[121497, 118048],
+								[122644, 118018],
+								[127180, 120955],
+								[124289, 119359],
+								[130969, 122961],
+								[128399, 121491],
+								[132604, 124865],
+								[132888, 127860],
+								[138820, 132968],
+								[139812, 136682],
+								[144251, 139759],
+								[147168, 139315],
+								[149721, 141320],
+								[152735, 146297],
+								[155812, 152206],
+								[155320, 151321],
+								[156127, 149867],
+								[157662, 152083],
+								[157518, 148024],
+								[158980, 148610],
+								[161105, 149546],
+								[159759, 148800],
+								[158245, 148925],
+								[155110, 151035],
+								[159515, 155125],
+								[163217, 159250],
+								[160026, 154362],
+								[157858, 155185],
+								[161650, 158509],
+								[166125, 162931],
+								[166437, 161438],
+								[170273, 164241],
+								[171249, 167922],
+								[171083, 167527],
+								[167712, 165255],
+								[168288, 163865],
+								[172980, 164756],
+								[174049, 165158],
+								[178031, 167312],
+								[179813, 168597],
+								[181430, 169882],
+								[182763, 171071],
+								[184147, 172365],
+								[185509, 173672],
+								[187590, 175685],
+								[187590, 175685]
+							],
+							[
+								[145710, 127730],
+								[140070, 126769],
+								[144371, 130483],
+								[144207, 130695],
+								[146255, 132804],
+								[146665, 134693],
+								[146795, 137116],
+								[143822, 136576],
+								[148042, 138368],
+								[148800, 141032],
+								[150498, 141711],
+								[149642, 141583],
+								[150211, 144438],
+								[156875, 149117],
+								[157527, 152442],
+								[156813, 152040],
+								[159172, 156134],
+								[165871, 161840],
+								[170659, 163448],
+								[169844, 164317],
+								[167378, 160132],
+								[164127, 161902],
+								[170705, 168108],
+								[178973, 173999],
+								[180128, 169853],
+								[187498, 174142],
+								[193295, 179362],
+								[196368, 183399],
+								[195268, 184526],
+								[207634, 193285],
+								[210539, 197725],
+								[209742, 200356],
+								[210523, 199238],
+								[201932, 196230],
+								[200750, 198229],
+								[195568, 194057],
+								[207282, 203569],
+								[218282, 209060],
+								[228606, 212521],
+								[230939, 214089],
+								[227960, 213556],
+								[230049, 216383],
+								[225688, 216744],
+								[236271, 226305],
+								[233449, 230240],
+								[231414, 229433],
+								[230423, 227134],
+								[235372, 227421],
+								[246151, 233154],
+								[245367, 232888],
+								[241152, 230529],
+								[256080, 239515],
+								[258987, 241433],
+								[267397, 248504],
+								[271160, 251838],
+								[271990, 252690],
+								[271654, 252576],
+								[271994, 255361],
+								[283687, 268426],
+								[287394, 276595],
+								[288272, 273521],
+								[285192, 275009],
+								[297038, 282194],
+								[291670, 279609],
+								[296385, 280902],
+								[296706, 283534],
+								[299131, 291097],
+								[303994, 292761],
+								[315149, 305951],
+								[309924, 297918],
+								[299318, 293641],
+								[294709, 286389],
+								[310548, 296340],
+								[315072, 301206],
+								[318195, 306689],
+								[320608, 314137],
+								[324046, 314351],
+								[326545, 309898],
+								[328210, 311049],
+								[329587, 312929],
+								[332009, 319492],
+								[336885, 323083],
+								[337278, 328224],
+								[334005, 322438],
+								[331121, 322983],
+								[340180, 329089],
+								[346011, 335715],
+								[346311, 342791],
+								[343086, 340190],
+								[335322, 330022],
+								[344729, 333338],
+								[354913, 337817],
+								[359791, 340729],
+								[364843, 344581],
+								[369343, 348469],
+								[372247, 353324],
+								[369932, 354017],
+								[370078, 357371],
+								[378846, 357643],
+								[378846, 357643]
+							],
+							[
+								[258540, 227156],
+								[249240, 230153],
+								[261488, 236793],
+								[260876, 238118],
+								[260779, 238515],
+								[264906, 243864],
+								[268628, 246620],
+								[273111, 250992],
+								[275097, 252534],
+								[273836, 253411],
+								[269533, 255038],
+								[275436, 260915],
+								[279053, 261725],
+								[279384, 264317],
+								[274154, 265831],
+								[283966, 270899],
+								[301940, 281602],
+								[316956, 295582],
+								[316548, 300568],
+								[311680, 294320],
+								[306369, 291714],
+								[315489, 295940],
+								[323445, 302232],
+								[331389, 309774],
+								[340846, 320402],
+								[341632, 324343],
+								[347007, 336355],
+								[349151, 340812],
+								[347876, 341738],
+								[354072, 344913],
+								[364209, 349982],
+								[366434, 345181],
+								[375584, 351389],
+								[377136, 351528],
+								[369629, 351840],
+								[385742, 365158],
+								[386872, 370706],
+								[389352, 375787],
+								[391922, 375606],
+								[403010, 386323],
+								[417986, 390789],
+								[419262, 392446],
+								[416741, 393905],
+								[417678, 393727],
+								[429614, 404720],
+								[428090, 405554],
+								[423179, 405864],
+								[436625, 410361],
+								[439079, 412515],
+								[440200, 413374],
+								[451790, 430293],
+								[471884, 449564],
+								[487167, 470323],
+								[484845, 465768],
+								[516205, 483151],
+								[522808, 488230],
+								[533592, 496995],
+								[531086, 504807],
+								[529870, 503512],
+								[536445, 510052],
+								[544713, 508752],
+								[539450, 507386],
+								[531600, 501479],
+								[534760, 506015],
+								[543376, 512706],
+								[543131, 519624],
+								[532167, 519846],
+								[532948, 520257],
+								[522783, 511311],
+								[545611, 525305],
+								[548746, 524354],
+								[549672, 525353],
+								[539701, 520255],
+								[553100, 530676],
+								[551982, 541695],
+								[556419, 539853],
+								[574787, 550703],
+								[582987, 554501],
+								[575104, 554528],
+								[589189, 562223],
+								[593549, 570852],
+								[586992, 568597],
+								[586402, 562258],
+								[579435, 557618],
+								[575985, 560483],
+								[597593, 577412],
+								[612490, 588463],
+								[625331, 597910],
+								[636646, 595656],
+								[625469, 592591],
+								[619053, 592009],
+								[603071, 587103],
+								[617444, 602726],
+								[609112, 597369],
+								[627426, 611200],
+								[621712, 600676],
+								[646196, 608305],
+								[666435, 624376],
+								[672204, 636036],
+								[672204, 636036]
+							],
+							[
+								[428430, 370853],
+								[419670, 373273],
+								[426662, 381635],
+								[431352, 384942],
+								[431378, 385825],
+								[432531, 389181],
+								[433143, 393249],
+								[439538, 398137],
+								[448237, 402754],
+								[457258, 407415],
+								[459156, 410786],
+								[460132, 416257],
+								[471887, 428306],
+								[487026, 437487],
+								[497560, 446644],
+								[506570, 454565],
+								[509542, 462047],
+								[511843, 467453],
+								[515373, 470645],
+								[517025, 474310],
+								[531752, 485823],
+								[551939, 498533],
+								[564951, 511734],
+								[564948, 520289],
+								[567245, 520761],
+								[570058, 522621],
+								[581542, 531409],
+								[598736, 542385],
+								[600545, 548790],
+								[605240, 556574],
+								[607854, 557672],
+								[618284, 566943],
+								[628603, 570867],
+								[628852, 575625],
+								[624468, 580764],
+								[617939, 578101],
+								[617410, 578831],
+								[623700, 585206],
+								[654577, 602115],
+								[665006, 611523],
+								[673682, 615225],
+								[672685, 621843],
+								[685634, 634440],
+								[718296, 664528],
+								[759770, 689841],
+								[775566, 711870],
+								[782975, 718029],
+								[793308, 725070],
+								[796268, 738206],
+								[807724, 754367],
+								[833366, 776146],
+								[851929, 775989],
+								[860615, 778039],
+								[857288, 774788],
+								[846961, 776490],
+								[838022, 775328],
+								[852692, 787752],
+								[868791, 800842],
+								[861979, 803808],
+								[862188, 800473],
+								[843629, 801044],
+								[854989, 810280],
+								[846878, 807305],
+								[865805, 817357],
+								[887740, 827375],
+								[914472, 835929],
+								[923173, 842036],
+								[926047, 853638],
+								[914561, 859298],
+								[920235, 857584],
+								[903520, 850133],
+								[923978, 860354],
+								[931475, 867511],
+								[925158, 867772],
+								[932749, 883989],
+								[950076, 908216],
+								[943870, 907505],
+								[931448, 894375],
+								[964690, 905548],
+								[977741, 922290],
+								[994629, 949955],
+								[1003301, 968944],
+								[993584, 947871],
+								[985230, 933555],
+								[988968, 940311],
+								[977098, 944041],
+								[1005972, 960242],
+								[1017161, 965089],
+								[1019684, 975408],
+								[1009552, 969064],
+								[1011257, 977525],
+								[1015073, 983210],
+								[1047988, 996586],
+								[1052590, 1005194],
+								[1041338, 990914],
+								[1052111, 1005714],
+								[1096654, 1022537],
+								[1102263, 1025920],
+								[1113918, 1038388],
+								[1113918, 1038388]
+							],
+							[
+								[656160, 582434],
+								[579390, 535504],
+								[615839, 576340],
+								[631357, 588023],
+								[657902, 609625],
+								[651402, 613625],
+								[657924, 619713],
+								[653784, 607233],
+								[662378, 616073],
+								[708418, 649532],
+								[711964, 653876],
+								[729296, 670121],
+								[702157, 659912],
+								[691110, 666931],
+								[719991, 693491],
+								[781600, 740155],
+								[796464, 765542],
+								[802766, 761966],
+								[796893, 769165],
+								[813642, 786468],
+								[828058, 794264],
+								[815045, 804123],
+								[809163, 793965],
+								[864091, 833627],
+								[893752, 835898],
+								[913516, 847869],
+								[917386, 854920],
+								[916624, 861956],
+								[902521, 866137],
+								[928490, 881368],
+								[922390, 888120],
+								[943581, 899461],
+								[935636, 903967],
+								[951560, 914874],
+								[997940, 936774],
+								[1017085, 949911],
+								[1033562, 962324],
+								[1046421, 973602],
+								[1059191, 984732],
+								[1071537, 995702],
+								[1085381, 1016484],
+								[1092072, 1043556],
+								[1110070, 1091633],
+								[1135305, 1115720],
+								[1181790, 1146925],
+								[1197503, 1140750],
+								[1190137, 1140576],
+								[1209994, 1167859],
+								[1194087, 1126266],
+								[1211389, 1143635],
+								[1221512, 1164146],
+								[1181985, 1161709],
+								[1164626, 1145465],
+								[1189317, 1157961],
+								[1217612, 1158822],
+								[1233713, 1167461],
+								[1247505, 1176536],
+								[1242971, 1178405],
+								[1236148, 1187848],
+								[1226778, 1198172],
+								[1282417, 1242204],
+								[1294695, 1232817],
+								[1310675, 1242683],
+								[1307169, 1243701],
+								[1299744, 1244891],
+								[1289284, 1245137],
+								[1345154, 1279194],
+								[1368953, 1299083],
+								[1392995, 1319581],
+								[1391623, 1317703],
+								[1401059, 1326622],
+								[1410073, 1335455],
+								[1420194, 1345470],
+								[1410758, 1344295],
+								[1397098, 1340765],
+								[1380327, 1335469],
+								[1441424, 1375284],
+								[1467426, 1391542],
+								[1494282, 1407577],
+								[1517429, 1420947],
+								[1510967, 1429941],
+								[1500381, 1430022],
+								[1466536, 1416915],
+								[1427064, 1399887],
+								[1452494, 1424276],
+								[1511552, 1468928],
+								[1525621, 1487703],
+								[1557653, 1502204],
+								[1555453, 1512999],
+								[1557712, 1533775],
+								[1555642, 1520577],
+								[1604274, 1543761],
+								[1621920, 1554506],
+								[1638316, 1566530],
+								[1650989, 1577455],
+								[1662698, 1588280],
+								[1674955, 1600135],
+								[1687228, 1612209],
+								[1706015, 1630814],
+								[1706015, 1630814]
+							]
+						]
+					],
 					buildUI:             function() {
 						console.log("build ui raiding 0");
 						var worldDataRoot = webfrontend.net.UpdateManager.getInstance().requester["WORLD"].obj;
@@ -5911,7 +5817,7 @@
 									break;
 								}
 							}
-							}
+						}
 						var CI = webfrontend.data.City.getInstance();
 						var app = qx.core.Init.getApplication();
 						this.setLayout(new qx.ui.layout.VBox(2));
@@ -5938,14 +5844,9 @@
 						webfrontend.gui.Util.formatWinClose(this);
 						console.log("build ui raiding 2");
 						this.setCaption(CI.getName() + "  " + webfrontend.gui.Util.formatCityCoordsFromId(CI.getId(), true));
-						console.log("build ui raiding 2.5");
 						this.tabview = new qx.ui.tabview.TabView();
 						this.tabview.add(this.createDungeonPage());
-						console.log("build ui raiding 6");
-
 						this.tabview.add(this.createBossPage());
-						console.log("build ui raiding 7");
-
 						this.tabview.add(this.createIdleUnitsPage());
 						console.log("build ui raiding 3");
 						this.tabview.add(this.createPvpPage());
@@ -6085,7 +5986,7 @@
 									m.removeRows(id, 1);
 								}
 							}
-							}
+						}
 
 						console.log("Rows Pre: " + m.getRowCount());
 						m.addRows([row], 0);
@@ -6110,7 +6011,7 @@
 									}
 									found = true;
 								}
-								}
+							}
 							if(!found) {
 								var CI = webfrontend.data.City.getInstance();
 								var cId = CI.getId();
@@ -6231,7 +6132,7 @@
 								this.targetContainer.add(subcontainer);
 								this.updateDungeonRaidInfo(d.get_Coordinates());
 							}
-							}
+						}
 						return retVal;
 					},
 					dungProgressType:    function(dungType) {
@@ -6250,8 +6151,8 @@
 							if(resMain.dungeonLevels[i].t < title - 1) {
 								retVal = title > 5 ? (i + 1) : i;
 								break;
-								}
-							}
+							}
+						}
 						return retVal;
 					},
 					pickBossRaider:      function() {
@@ -6272,9 +6173,9 @@
 										s: uspeed
 									};
 									break;
-									}
-								}
-							}
+								}
+							}
+						}
 						return retVal;
 					},
 					formatNumber:        function(str) {
@@ -6320,10 +6221,10 @@
 									if(worldDataRoot[key].hasOwnProperty("d") && worldDataRoot[key].hasOwnProperty("c")) {
 										this.worldData = worldDataRoot[key];
 										break;
-										}
-									}
-								}
-							}
+									}
+								}
+							}
+						}
 						if(this.objData == "none" && this.worldData) {
 							for(var cluster in this.worldData.d) {
 								for(var key in this.worldData.d[cluster]) {
@@ -6468,14 +6369,14 @@
 													break;
 											}
 										}
-										}
-									}
-								}
-							}
+									}
+								}
+							}
+						}
 						m.sortByColumn(4, true);
 					},
 
-					createIdleUnitsPage:  function() {
+					createIdleUnitsPage:    function() {
 						var idleUnitsPage = new qx.ui.tabview.Page("Lazy Troops");
 						idleUnitsPage.setLayout(new qx.ui.layout.VBox(2));
 						var container = new qx.ui.container.Composite();
@@ -6507,7 +6408,7 @@
 						this.autoUpdate = new qx.ui.form.CheckBox("Rfrsh").set({
 							marginLeft: 2
 						});
-
+						;
 						this.autoUpdate.setToolTipText("If unchecked, the data won't refresh until you click the refresh button.<br/>May solve some performance issues with flashing screen.");
 						container.add(this.autoUpdate);
 						this.autoUpdate.setValue(value == null || value.toLowerCase() == "true");
@@ -6591,10 +6492,10 @@
 						btn.autoUpdate = this.autoUpdate;
 						return idleUnitsPage;
 					},
-					cityGroupSelected:    function(e) {
+					cityGroupSelected:      function(e) {
 						paDebug("Execute button: " + this.getLabel());
 					},
-					createBossPage:       function() {
+					createBossPage:         function() {
 						var bossPage = new qx.ui.tabview.Page("Boss Raiding");
 						bossPage.setLayout(new qx.ui.layout.VBox(2));
 						var container = new qx.ui.container.Composite();
@@ -6671,8 +6572,8 @@
 													break;
 												}
 											}
-											}
-										}
+										}
+									}
 									break;
 								case 6:
 									break;
@@ -6689,7 +6590,7 @@
 						});
 						return bossPage;
 					},
-					createPvpPage:        function() {
+					createPvpPage:          function() {
 
 						var pvpPage = new qx.ui.tabview.Page("Cache/Pvp");
 						pvpPage.setLayout(new qx.ui.layout.VBox(2));
@@ -6921,8 +6822,8 @@
 											c:  tmpCount
 										});
 									}
-									}
-								}
+								}
+							}
 							var sendTime = this.pvp.getDelay5sOffsetTime();
 							var commandManager = webfrontend.net.CommandManager.getInstance();
 							var secs = 0;
@@ -6931,36 +6832,36 @@
 									var rpt = parseInt(data[ii][7]);
 									for(b = rpt; b > 0; --b) {
 										var sndUnits = [];
-											for(var a = 0; a < units.length; ++a) {
-												if(units[a].c > 0) {
-													sndUnits.push({
-														t: units[a].t,
-														c: units[a].c
-													});
-													var amt = Math.floor(units[a].c / lossDivisor);
-													units[a].c = Math.max(0, amt);
-												}
-											}
-											var request = {
-												cityid:                     cid,
-												units:                      sndUnits,
-												targetPlayer:               data[ii][0],
-												targetCity:                 data[ii][4],
-												order:                      2,
-												transport:                  1,
-												createCity:                 "",
-												timeReferenceType:          sendMode,
-												referenceTimeUTCMillis:     sendTime + 1000,
-												raidTimeReferenceType:      0,
-												raidReferenceTimeUTCMillis: 0,
-												iUnitOrderOptions:          0,
-												iOrderCountRaid:            0
-											};
-											commandManager.sendCommand("OrderUnits", request, null, function() {
-											});
-											var tcid = Number(String(data[ii][3]).replace(',', ''));
-											var cx = tcid & 0xFFFF;
-											var cy = tcid >> 16;
+										for(var a = 0; a < units.length; ++a) {
+											if(units[a].c > 0) {
+												sndUnits.push({
+													t: units[a].t,
+													c: units[a].c
+												});
+												var amt = Math.floor(units[a].c / lossDivisor);
+												units[a].c = Math.max(0, amt);
+											}
+										}
+										var request = {
+											cityid:                     cid,
+											units:                      sndUnits,
+											targetPlayer:               data[ii][0],
+											targetCity:                 data[ii][4],
+											order:                      2,
+											transport:                  1,
+											createCity:                 "",
+											timeReferenceType:          sendMode,
+											referenceTimeUTCMillis:     sendTime + 1000,
+											raidTimeReferenceType:      0,
+											raidReferenceTimeUTCMillis: 0,
+											iUnitOrderOptions:          0,
+											iOrderCountRaid:            0
+										};
+										commandManager.sendCommand("OrderUnits", request, null, function() {
+										});
+										var tcid = Number(String(data[ii][3]).replace(',', ''));
+										var cx = tcid & 0xFFFF;
+										var cy = tcid >> 16;
 										var dist = Math.sqrt((x - cx) * (x - cx) + (y - cy) * (y - cy));
 										secs += Math.ceil(5 + (speed * 2 * dist));
 										var hours = Math.floor(secs / (60 * 60));
@@ -6970,8 +6871,8 @@
 										var seconds = Math.ceil(divisor_for_seconds);
 										sendTime = this.pvp.getDelayWithOffsetTime(hours, minutes, seconds);
 									}
-									}
-								}
+								}
+							}
 							var remainingTs = 0;
 							for(var a = 0; a < units.length; ++a) {
 								if(units[a].c > 0) {
@@ -7071,7 +6972,7 @@
 						pvpPage.add(this.pvpTroopContainer);
 						return pvpPage;
 					},
-					GetDungeonModifier:   function(dungeonType) {
+					GetDungeonModifier:     function(dungeonType) {
 						var rv = 1;
 						if(this.wantWood.getValue() && dungeonType == 5)
 							rv *= distWantModifier;
@@ -7081,524 +6982,509 @@
 
 						return rv;
 					},
-					createDungeonPage:    function() {
+					createDungeonPage:      function() {
-						try {
-							var dungeonPage = new qx.ui.tabview.Page("Dungeons");
-							dungeonPage.setLayout(new qx.ui.layout.Dock());
+						var dungeonPage = new qx.ui.tabview.Page("Dungeons");
+						dungeonPage.setLayout(new qx.ui.layout.Dock());
 
-							var layoutContainer = new qx.ui.container.Composite();
-							layoutContainer.setLayout(new qx.ui.layout.VBox());
+						var layoutContainer = new qx.ui.container.Composite();
+						layoutContainer.setLayout(new qx.ui.layout.VBox());
 
-							layoutContainer.add(new qx.ui.basic.Label("Targets"));
+						layoutContainer.add(new qx.ui.basic.Label("Targets"));
 
-							var container = new qx.ui.container.Composite();
-							container.setLayout(new qx.ui.layout.Basic());
-							container.add(new qx.ui.basic.Label("Type").set({
-								alignY: "middle"
-							}), {
-								top:  0,
-								left: 80
-							});
-							container.add(new qx.ui.basic.Label("Prog").set({
-								alignY: "middle"
-							}), {
-								top:  0,
-								left: 130
-							});
-							container.add(new qx.ui.basic.Label("Coords").set({
-								alignY: "middle"
-							}), {
-								top:  0,
-								left: 180
-							});
-							container.add(new qx.ui.basic.Label("Dist").set({
-								alignY: "middle"
-							}), {
-								top:  0,
-								left: 230
-							});
-							container.add(new qx.ui.basic.Label("Max").set({
-								alignY: "middle"
-							}), {
-								top:  0,
-								left: 280
-							});
-							container.add(new qx.ui.basic.Label("Avg").set({
-								alignY: "middle"
-							}), {
-								top:  0,
-								left: 330
-							});
-							var sel = new qx.ui.form.SelectBox().set({
-								width:         77,
-								alignY:        "middle",
-								paddingLeft:   4,
-								paddingRight:  4,
-								paddingTop:    0,
-								paddingBottom: 0
-							});
-							sel.add(new qx.ui.form.ListItem("Max+90%"));
-							sel.add(new qx.ui.form.ListItem("Max+60%"));
-							sel.add(new qx.ui.form.ListItem("Max+30%"));
-							sel.add(new qx.ui.form.ListItem("Max+15%"));
-							sel.add(new qx.ui.form.ListItem("Max"));
+						var container = new qx.ui.container.Composite();
+						container.setLayout(new qx.ui.layout.Basic());
+						container.add(new qx.ui.basic.Label("Type").set({
+							alignY: "middle"
+						}), {
+							top:  0,
+							left: 80
+						});
+						container.add(new qx.ui.basic.Label("Prog").set({
+							alignY: "middle"
+						}), {
+							top:  0,
+							left: 130
+						});
+						container.add(new qx.ui.basic.Label("Coords").set({
+							alignY: "middle"
+						}), {
+							top:  0,
+							left: 180
+						});
+						container.add(new qx.ui.basic.Label("Dist").set({
+							alignY: "middle"
+						}), {
+							top:  0,
+							left: 230
+						});
+						container.add(new qx.ui.basic.Label("Max").set({
+							alignY: "middle"
+						}), {
+							top:  0,
+							left: 280
+						});
+						container.add(new qx.ui.basic.Label("Avg").set({
+							alignY: "middle"
+						}), {
+							top:  0,
+							left: 330
+						});
+						var sel = new qx.ui.form.SelectBox().set({
+							width:         77,
+							alignY:        "middle",
+							paddingLeft:   4,
+							paddingRight:  4,
+							paddingTop:    0,
+							paddingBottom: 0
+						});
+						sel.add(new qx.ui.form.ListItem("Max+90%"));
+						sel.add(new qx.ui.form.ListItem("Max+60%"));
+						sel.add(new qx.ui.form.ListItem("Max+30%"));
+						sel.add(new qx.ui.form.ListItem("Max+15%"));
+						sel.add(new qx.ui.form.ListItem("Max"));
 
-							console.debug("DP 1");
-							//sel.add( new qx.ui.form.ListItem( "Mavg" ) );
-							//sel.add( new qx.ui.form.ListItem( "Avg" ) );
-							//sel.add( new qx.ui.form.ListItem( "Split" ) );
-							sel.setSelection([sel.getChildren()[3]]);
-							this.raidAddType = sel;
-							container.add(sel, {
-								top:  0,
-								left: 0
-							});
-							sel.addListener("changeSelection", function(e) {
-								localStorage.setItem("mm__addType", e.getData()[0].getLabel());
-							});
-							SelectFromStorage("mm__addType", sel);
+						//sel.add( new qx.ui.form.ListItem( "Mavg" ) );
+						//sel.add( new qx.ui.form.ListItem( "Avg" ) );
+						//sel.add( new qx.ui.form.ListItem( "Split" ) );
+						sel.setSelection([sel.getChildren()[3]]);
+						this.raidAddType = sel;
+						container.add(sel, {
+							top:  0,
+							left: 0
+						});
+						sel.addListener("changeSelection", function(e) {
+							localStorage.setItem("mm__addType", e.getData()[0].getLabel());
+						});
+						SelectFromStorage("mm__addType", sel);
 
-							//container.add( new qx.ui.basic.Label("Min"),    {top: 0, left: 350} );
-							this.targetContainer = new qx.ui.container.Composite();
-							this.targetContainer.setLayout(new qx.ui.layout.VBox().set({
-								spacing: 3
-							}));
-							var scrollContainer = new qx.ui.container.Scroll();
-							scrollContainer.add(this.targetContainer);
-							scrollContainer.setMaxHeight(250);
-							var btn = new qx.ui.form.Button("X").set({
-								paddingLeft:   5,
-								paddingRight:  5,
-								paddingTop:    0,
-								paddingBottom: 0
-							});
+						//container.add( new qx.ui.basic.Label("Min"),    {top: 0, left: 350} );
+						this.targetContainer = new qx.ui.container.Composite();
+						this.targetContainer.setLayout(new qx.ui.layout.VBox().set({
+							spacing: 3
+						}));
+						var scrollContainer = new qx.ui.container.Scroll();
+						scrollContainer.add(this.targetContainer);
+						scrollContainer.setMaxHeight(250);
+						var btn = new qx.ui.form.Button("X").set({
+							paddingLeft:   5,
+							paddingRight:  5,
+							paddingTop:    0,
+							paddingBottom: 0
+						});
-							console.debug("DP 0");
-
-							btn.targetContainer = this.targetContainer;
-							btn.addListener("click", function() {
-								this.targetContainer.removeAll();
-							});
-							container.add(btn, {
-								top:  0,
-								left: 460
-							});
-							layoutContainer.add(container);
-							layoutContainer.add(new qx.ui.core.Widget().set({
-								backgroundColor: "#c4a77b",
-								height:          2,
-								allowGrowX:      true,
-								marginTop:       4,
-								marginBottom:    2
-							}));
-							dungeonPage.add(layoutContainer, {
-								edge: "north"
-							});
-							dungeonPage.add(scrollContainer, {
-								edge:  "center",
-								width: "100%"
-							});
+						btn.targetContainer = this.targetContainer;
+						btn.addListener("click", function() {
+							this.targetContainer.removeAll();
+						});
+						container.add(btn, {
+							top:  0,
+							left: 460
+						});
+						layoutContainer.add(container);
+						layoutContainer.add(new qx.ui.core.Widget().set({
+							backgroundColor: "#c4a77b",
+							height:          2,
+							allowGrowX:      true,
+							marginTop:       4,
+							marginBottom:    2
+						}));
+						dungeonPage.add(layoutContainer, {
+							edge: "north"
+						});
+						dungeonPage.add(scrollContainer, {
+							edge:  "center",
+							width: "100%"
+						});
-							console.debug("DP 0");
-							container = new qx.ui.container.Composite();
-							container.setLayout(new qx.ui.layout.VBox());
-							container.add(new qx.ui.core.Widget().set({
-								backgroundColor: "#c4a77b",
-								height:          2,
-								allowGrowX:      true,
-								marginTop:       4,
-								marginBottom:    4
-							}));
-							var subContainer = new qx.ui.container.Composite();
-							subContainer.setLayout(new qx.ui.layout.HBox().set({
-								spacing: 4
-							}));
-							subContainer.add(new qx.ui.basic.Label("Troops").set({
-								alignY: "middle"
-							}));
-							this.split = new qx.ui.form.CheckBox("Split").set({
-								marginLeft: 5
-							});
-							this.split.setToolTipText("If checked, adds as many groups as possible at around the level indicated.");
-							this.split.initValue(false);
-							subContainer.add(this.split);
-							this.wantWood = new qx.ui.form.CheckBox("wantWood").set({
-								marginLeft: 5
-							});
-							this.wantWood.setToolTipText("If checked, forests are favoured when dungeontype is flexible.\nCan be used with wantStone.\nExample:  If a the best mountain is up to 5 away and the best forest is 7 away, it will choose the forest.\nIf the mountain is closer or the forest farther, it will choose the mountain.\nThe setting will have no effect if there a many close forest dungeons.");
-							this.wantWood.initValue(localStorage.getItem("mm__wantWood"));
-							subContainer.add(this.wantWood);
-							this.wantStone = new qx.ui.form.CheckBox("wantStone").set({
-								marginLeft: 5
-							});
-							this.wantStone.setToolTipText("See 'getWood'.\n");
-							this.wantStone.initValue(localStorage.getItem("mm__wantStone") ? true : false);
-							subContainer.add(this.wantStone);
+						container = new qx.ui.container.Composite();
+						container.setLayout(new qx.ui.layout.VBox());
+						container.add(new qx.ui.core.Widget().set({
+							backgroundColor: "#c4a77b",
+							height:          2,
+							allowGrowX:      true,
+							marginTop:       4,
+							marginBottom:    4
+						}));
+						var subContainer = new qx.ui.container.Composite();
+						subContainer.setLayout(new qx.ui.layout.HBox().set({
+							spacing: 4
+						}));
+						subContainer.add(new qx.ui.basic.Label("Troops").set({
+							alignY: "middle"
+						}));
+						this.split = new qx.ui.form.CheckBox("Split").set({
+							marginLeft: 5
+						});
+						this.split.setToolTipText("If checked, adds as many groups as possible at around the level indicated.");
+						this.split.initValue(false);
+						subContainer.add(this.split);
+						this.wantWood = new qx.ui.form.CheckBox("wantWood").set({
+							marginLeft: 5
+						});
+						this.wantWood.setToolTipText("If checked, forests are favoured when dungeontype is flexible.\nCan be used with wantStone.\nExample:  If a the best mountain is up to 5 away and the best forest is 7 away, it will choose the forest.\nIf the mountain is closer or the forest farther, it will choose the mountain.\nThe setting will have no effect if there a many close forest dungeons.");
+						this.wantWood.initValue(localStorage.getItem("mm__wantWood"));
+						subContainer.add(this.wantWood);
+						this.wantStone = new qx.ui.form.CheckBox("wantStone").set({
+							marginLeft: 5
+						});
+						this.wantStone.setToolTipText("See 'getWood'.\n");
+						this.wantStone.initValue(localStorage.getItem("mm__wantStone") ? true : false);
+						subContainer.add(this.wantStone);
 
-							subContainer.add(new qx.ui.core.Spacer(), {
-								flex: 1
-							});
+						subContainer.add(new qx.ui.core.Spacer(), {
+							flex: 1
+						});
-							console.debug("DP 0");
 
-							subContainer.add(new qx.ui.basic.Label("Raid:").set({
-								alignY: "middle"
-							}));
-							sel = new qx.ui.form.SelectBox().set({
-								width:  80,
-								alignY: "middle"
-							});
+						subContainer.add(new qx.ui.basic.Label("Raid:").set({
+							alignY: "middle"
+						}));
+						sel = new qx.ui.form.SelectBox().set({
+							width:  80,
+							alignY: "middle"
+						});
 
-							sel.add(new qx.ui.form.ListItem("Manual"));
-							sel.add(new qx.ui.form.ListItem("AvaRaid"));
-							sel.add(new qx.ui.form.ListItem("null"));
-							sel.add(new qx.ui.form.ListItem("really null")); // don't use this
-							sel.add(new qx.ui.form.ListItem("undefined"));
-							sel.add(new qx.ui.form.ListItem("NaN"));
-							sel.add(new qx.ui.form.ListItem("404"));
-							sel.add(new qx.ui.form.ListItem("+0.0"));
+						sel.add(new qx.ui.form.ListItem("Manual"));
+						sel.add(new qx.ui.form.ListItem("AvaRaid"));
+						sel.add(new qx.ui.form.ListItem("null"));
+						sel.add(new qx.ui.form.ListItem("really null")); // don't use this
+						sel.add(new qx.ui.form.ListItem("undefined"));
+						sel.add(new qx.ui.form.ListItem("NaN"));
+						sel.add(new qx.ui.form.ListItem("404"));
+						sel.add(new qx.ui.form.ListItem("+0.0"));
 
-							sel.setSelection([sel.getChildren()[0]]);
+						sel.setSelection([sel.getChildren()[0]]);
 
-							//	sel.setToolTipText("Send to the dungeons you have selected.");
-							sel.addListener("changeSelection", function(e) {
-								localStorage.setItem("mm__raidMode", e.getData()[0].getLabel());
+						//	sel.setToolTipText("Send to the dungeons you have selected.");
+						sel.addListener("changeSelection", function(e) {
+							localStorage.setItem("mm__raidMode", e.getData()[0].getLabel());
 
-								if(e.getData()[0].getLabel() == "NaN") {
-									// polite
+							if(e.getData()[0].getLabel() == "NaN") {
+								// polite
 
-									this.AvaRaidMode = 3;
-								} else if(e.getData()[0].getLabel() == "AvaRaid") {
-									sel.setToolTipText("Selects dungeons and raids to send");
+								this.AvaRaidMode = 3;
+							} else if(e.getData()[0].getLabel() == "AvaRaid") {
+								sel.setToolTipText("Selects dungeons and raids to send");
 
-									this.AvaRaidMode = 1;
-								} else if(e.getData()[0].getLabel() == "+0.0") {
+								this.AvaRaidMode = 1;
+							} else if(e.getData()[0].getLabel() == "+0.0") {
 
-									this.AvaRaidMode = 2;
-								} else {
-									// default
-									sel.setToolTipText("Manual, tedius mode.");
-									this.AvaRaidMode = 0;
-								}
-							}, this);
+								this.AvaRaidMode = 2;
+							} else {
+								// default
+								sel.setToolTipText("Manual, tedius mode.");
+								this.AvaRaidMode = 0;
+							}
+						}, this);
-							console.debug("DP 0");
 
-							// set the initial raid mode
+						// set the initial raid mode
 
-							subContainer.add(sel);
-							this.raidModeSel = sel;
-							SetSelectionFromStore(sel, "mm__raidMode");
-							subContainer.add(new qx.ui.basic.Label("Ratio:").set({
-								alignY: "middle"
-							}));
-							sel = new qx.ui.form.SelectBox().set({
-								width:  80,
-								alignY: "middle"
-							});
-							sel.add(new qx.ui.form.ListItem("Available"));
-							sel.add(new qx.ui.form.ListItem("Total"));
-							sel.add(new qx.ui.form.ListItem("None"));
-							if(this.ratioMode == "total")
-								sel.setSelection([sel.getChildren()[1]]);
-							else if(this.ratioMode == "none")
-								sel.setSelection([sel.getChildren()[2]]);
+						subContainer.add(sel);
+						this.raidModeSel = sel;
+						SetSelectionFromStore(sel, "mm__raidMode");
+						subContainer.add(new qx.ui.basic.Label("Ratio:").set({
+							alignY: "middle"
+						}));
+						sel = new qx.ui.form.SelectBox().set({
+							width:  80,
+							alignY: "middle"
+						});
+						sel.add(new qx.ui.form.ListItem("Available"));
+						sel.add(new qx.ui.form.ListItem("Total"));
+						sel.add(new qx.ui.form.ListItem("None"));
+						if(this.ratioMode == "total")
+							sel.setSelection([sel.getChildren()[1]]);
+						else if(this.ratioMode == "none")
+							sel.setSelection([sel.getChildren()[2]]);
 
-							subContainer.add(sel);
-							sel.addListener("changeSelection", function(e) {
-								localStorage.setItem("mm__ratioOpts", e.getData()[0].getLabel());
-								var readOnly = false;
-								if(e.getData()[0].getLabel() == "Available")
-									this.ratioMode = "count";
-								else if(e.getData()[0].getLabel() == "Total")
-									this.ratioMode = "total";
-								else {
-									this.ratioMode = "none";
-									readOnly = true;
-								}
-								this.setTotalsReadOnly(readOnly);
-							});
-							container.add(subContainer);
-							SetSelectionFromStore(sel, "mm__ratioOpts");
+						subContainer.add(sel);
+						sel.addListener("changeSelection", function(e) {
+							localStorage.setItem("mm__ratioOpts", e.getData()[0].getLabel());
+							var readOnly = false;
+							if(e.getData()[0].getLabel() == "Available")
+								this.ratioMode = "count";
+							else if(e.getData()[0].getLabel() == "Total")
+								this.ratioMode = "total";
+							else {
+								this.ratioMode = "none";
+								readOnly = true;
+							}
+							this.setTotalsReadOnly(readOnly);
+						});
+						container.add(subContainer);
+						SetSelectionFromStore(sel, "mm__ratioOpts");
 
-							this.troopContainer = new qx.ui.container.Composite();
-							this.troopContainer.setLayout(new qx.ui.layout.HBox().set({
-								spacing: 4
-							}));
-							container.add(this.troopContainer);
-							container.add(new qx.ui.core.Widget().set({
-								backgroundColor: "#c4a77b",
-								height:          2,
-								allowGrowX:      true,
-								marginTop:       4,
-								marginBottom:    4
-							}));
-							this.commandContainer = new qx.ui.container.Composite();
-							this.commandContainer.setLayout(new qx.ui.layout.VBox().set({
-								spacing: 2
-							}));
-							var defVis = "hidden";
-							subContainer = new qx.ui.container.Composite();
-							subContainer.setLayout(new qx.ui.layout.HBox().set({
-								spacing: 2
-							}));
-							sel = new qx.ui.form.SelectBox().set({
-								width:    80,
-								alignY:   "middle",
-								tabIndex: 1
-							});
-							var _sendTime = sel;
-							sel.add(new qx.ui.form.ListItem("Arrive", null, webfrontend.gui.SendArmyWindow.timings.arrive));
-							sel.add(new qx.ui.form.ListItem("Depart", null, webfrontend.gui.SendArmyWindow.timings.depart));
-							sel.add(new qx.ui.form.ListItem("Delay 5s", null, 100));
-							sel.add(new qx.ui.form.ListItem("Now", null, webfrontend.gui.SendArmyWindow.timings.now));
-							sel.setSelection([sel.getChildren()[3]]);
-							//   sel.rw = this;
-							sel.addListener("changeSelection", function(e) {
-								localStorage.setItem("mm__timingOpts", e.getData()[0].getLabel());
-								var ch = this.getLayoutParent().getChildren();
-								var vis = "visible";
-								if(e.getData()[0].getLabel() == "Now" || e.getData()[0].getLabel() == "Delay 5s")
-									vis = "hidden";
-								for(var i = 1; i <= 6; i++)
-									ch[i].setVisibility(vis);
-								this.updateAvailableUnits();
-							});
-							subContainer.add(sel);
-							subContainer.add(this.createHMSTextField(defVis, 2));
-							subContainer.add(new qx.ui.basic.Label(":").set({
-								visibility: defVis,
-								alignY:     "middle"
-							}));
-							subContainer.add(this.createHMSTextField(defVis, 3));
-							subContainer.add(new qx.ui.basic.Label(":").set({
-								visibility: defVis,
-								alignY:     "middle"
-							}));
-							subContainer.add(this.createHMSTextField(defVis, 4));
-							sel = new qx.ui.form.SelectBox().set({
-								width:      100,
-								visibility: defVis,
-								alignY:     "middle",
-								tabIndex:   5
-							});
+						this.troopContainer = new qx.ui.container.Composite();
+						this.troopContainer.setLayout(new qx.ui.layout.HBox().set({
+							spacing: 4
+						}));
+						container.add(this.troopContainer);
+						container.add(new qx.ui.core.Widget().set({
+							backgroundColor: "#c4a77b",
+							height:          2,
+							allowGrowX:      true,
+							marginTop:       4,
+							marginBottom:    4
+						}));
+						this.commandContainer = new qx.ui.container.Composite();
+						this.commandContainer.setLayout(new qx.ui.layout.VBox().set({
+							spacing: 2
+						}));
+						var defVis = "hidden";
+						subContainer = new qx.ui.container.Composite();
+						subContainer.setLayout(new qx.ui.layout.HBox().set({
+							spacing: 2
+						}));
+						sel = new qx.ui.form.SelectBox().set({
+							width:    80,
+							alignY:   "middle",
+							tabIndex: 1
+						});
+						var _sendTime = sel;
+						sel.add(new qx.ui.form.ListItem("Arrive", null, webfrontend.gui.SendArmyWindow.timings.arrive));
+						sel.add(new qx.ui.form.ListItem("Depart", null, webfrontend.gui.SendArmyWindow.timings.depart));
+						sel.add(new qx.ui.form.ListItem("Delay 5s", null, 100));
+						sel.add(new qx.ui.form.ListItem("Now", null, webfrontend.gui.SendArmyWindow.timings.now));
+						sel.setSelection([sel.getChildren()[3]]);
+						//   sel.rw = this;
+						sel.addListener("changeSelection", function(e) {
+							localStorage.setItem("mm__timingOpts", e.getData()[0].getLabel());
+							var ch = this.getLayoutParent().getChildren();
+							var vis = "visible";
+							if(e.getData()[0].getLabel() == "Now" || e.getData()[0].getLabel() == "Delay 5s")
+								vis = "hidden";
+							for(var i = 1; i <= 6; i++)
+								ch[i].setVisibility(vis);
+							this.updateAvailableUnits();
+						});
+						subContainer.add(sel);
+						subContainer.add(this.createHMSTextField(defVis, 2));
+						subContainer.add(new qx.ui.basic.Label(":").set({
+							visibility: defVis,
+							alignY:     "middle"
+						}));
+						subContainer.add(this.createHMSTextField(defVis, 3));
+						subContainer.add(new qx.ui.basic.Label(":").set({
+							visibility: defVis,
+							alignY:     "middle"
+						}));
+						subContainer.add(this.createHMSTextField(defVis, 4));
+						sel = new qx.ui.form.SelectBox().set({
+							width:      100,
+							visibility: defVis,
+							alignY:     "middle",
+							tabIndex:   5
+						});
-							console.debug("DP 3");
-							var _sendDay = sel;
-							sel.add(new qx.ui.form.ListItem("7 days", null, 7));
-							sel.add(new qx.ui.form.ListItem("6 days", null, 6));
-							sel.add(new qx.ui.form.ListItem("5 days", null, 5));
-							sel.add(new qx.ui.form.ListItem("4 days", null, 4));
-							sel.add(new qx.ui.form.ListItem("3 days", null, 3));
-							sel.add(new qx.ui.form.ListItem("2 days", null, 2));
-							sel.add(new qx.ui.form.ListItem("Tomorrow", null, 1));
-							sel.add(new qx.ui.form.ListItem("Today", null, 0));
-							sel.setSelection([sel.getChildren()[7]]);
-							subContainer.add(sel);
-							subContainer.add(new qx.ui.core.Spacer(), {
-								flex: 1
-							});
-							sel.addListener("changeSelection", function(e) {
-								localStorage.setItem("mm__delayDayOpts", e.getData()[0].getLabel());
-							});
-							SetSelectionFromStore(sel, "mm__delayDayOpts");
-							if(value != null) {
-								var opts = sel.getChildren();
-								for(var ii = 0; ii < opts.length; ++ii) {
-									if(opts[ii].getLabel() == value) {
-										sel.setSelection([opts[ii]]);
-										break;
-									}
-								}
-							}
+						var _sendDay = sel;
+						sel.add(new qx.ui.form.ListItem("7 days", null, 7));
+						sel.add(new qx.ui.form.ListItem("6 days", null, 6));
+						sel.add(new qx.ui.form.ListItem("5 days", null, 5));
+						sel.add(new qx.ui.form.ListItem("4 days", null, 4));
+						sel.add(new qx.ui.form.ListItem("3 days", null, 3));
+						sel.add(new qx.ui.form.ListItem("2 days", null, 2));
+						sel.add(new qx.ui.form.ListItem("Tomorrow", null, 1));
+						sel.add(new qx.ui.form.ListItem("Today", null, 0));
+						sel.setSelection([sel.getChildren()[7]]);
+						subContainer.add(sel);
+						subContainer.add(new qx.ui.core.Spacer(), {
+							flex: 1
+						});
+						sel.addListener("changeSelection", function(e) {
+							localStorage.setItem("mm__delayDayOpts", e.getData()[0].getLabel());
+						});
+						SetSelectionFromStore(sel, "mm__delayDayOpts");
+						if(value != null) {
+							var opts = sel.getChildren();
+							for(var ii = 0; ii < opts.length; ++ii) {
+								if(opts[ii].getLabel() == value) {
+									sel.setSelection([opts[ii]]);
+									break;
+								}
+							}
+						}
 
-							this.departOptions = new qx.ui.form.SelectBox().set({
-								width:    88,
-								alignY:   "middle",
-								tabIndex: 6
-							});
-							this.departOptions.add(new qx.ui.form.ListItem("Stagger opt", null, 0));
-							this.departOptions.add(new qx.ui.form.ListItem("1 min", null, 1));
-							this.departOptions.add(new qx.ui.form.ListItem("2 min", null, 2));
-							this.departOptions.add(new qx.ui.form.ListItem("5 min", null, 5));
-							this.departOptions.add(new qx.ui.form.ListItem("10 min", null, 10));
-							this.departOptions.add(new qx.ui.form.ListItem("20 min", null, 20));
-							this.departOptions.add(new qx.ui.form.ListItem("30 min", null, 30));
-							this.departOptions.add(new qx.ui.form.ListItem("45 min", null, 45));
-							this.departOptions.add(new qx.ui.form.ListItem("60 min", null, 60));
-							subContainer.add(this.departOptions);
-							value = localStorage.getItem("mm__departOpts");
-							if(value != null) {
-								var opts = this.departOptions.getChildren();
-								for(var ii = 0; ii < opts.length; ++ii) {
-									if(opts[ii].getLabel() == value) {
-										this.departOptions.setSelection([opts[ii]]);
-										break;
-									}
-								}
-							}
+						this.departOptions = new qx.ui.form.SelectBox().set({
+							width:    88,
+							alignY:   "middle",
+							tabIndex: 6
+						});
+						this.departOptions.add(new qx.ui.form.ListItem("Stagger opt", null, 0));
+						this.departOptions.add(new qx.ui.form.ListItem("1 min", null, 1));
+						this.departOptions.add(new qx.ui.form.ListItem("2 min", null, 2));
+						this.departOptions.add(new qx.ui.form.ListItem("5 min", null, 5));
+						this.departOptions.add(new qx.ui.form.ListItem("10 min", null, 10));
+						this.departOptions.add(new qx.ui.form.ListItem("20 min", null, 20));
+						this.departOptions.add(new qx.ui.form.ListItem("30 min", null, 30));
+						this.departOptions.add(new qx.ui.form.ListItem("45 min", null, 45));
+						this.departOptions.add(new qx.ui.form.ListItem("60 min", null, 60));
+						subContainer.add(this.departOptions);
+						value = localStorage.getItem("mm__departOpts");
+						if(value != null) {
+							var opts = this.departOptions.getChildren();
+							for(var ii = 0; ii < opts.length; ++ii) {
+								if(opts[ii].getLabel() == value) {
+									this.departOptions.setSelection([opts[ii]]);
+									break;
+								}
+							}
+						}
-							console.debug("DP 5");
-
-							this.departOptions.addListener("changeSelection", function(e) {
-								localStorage.setItem("mm__departOpts", e.getData()[0].getLabel());
-							});
-							this.nextIdleCityButton = new webfrontend.ui.SoundButton(null, "webfrontend/theme/scrollbar/scrollbar-right.png").set({
-								paddingLeft:   8,
-								paddingRight:  8,
-								paddingTop:    2,
-								paddingBottom: 2,
-								marginLeft:    15,
-								marginRight:   15,
-								alignY:        "center",
-								enabled:       false,
-								toolTipText:   "Next idle city"
-							});
-							this.nextIdleCityButton.addListener("click", this.nextIdleRaidCity);
-							subContainer.add(this.nextIdleCityButton);
+						this.departOptions.addListener("changeSelection", function(e) {
+							localStorage.setItem("mm__departOpts", e.getData()[0].getLabel());
+						});
+						this.nextIdleCityButton = new webfrontend.ui.SoundButton(null, "webfrontend/theme/scrollbar/scrollbar-right.png").set({
+							paddingLeft:   8,
+							paddingRight:  8,
+							paddingTop:    2,
+							paddingBottom: 2,
+							marginLeft:    15,
+							marginRight:   15,
+							alignY:        "center",
+							enabled:       false,
+							toolTipText:   "Next idle city"
+						});
+						this.nextIdleCityButton.addListener("click", this.nextIdleRaidCity);
+						subContainer.add(this.nextIdleCityButton);
 
-							btn = new qx.ui.form.Button("GO").set({
-								paddingLeft:   4,
-								paddingRight:  4,
-								paddingTop:    2,
-								paddingBottom: 2,
-								alignY:        "center",
-								enabled:       true
-							});
-							this.autoRaidButton = btn;
-							this.goButton = btn;
-							btn.setToolTipText("AvaRaid yay!");
-							btn.addListener("execute", this.autoRaidPleaseToggle, this);
-							subContainer.add(btn);
-							this.commandContainer.add(subContainer);
+						btn = new qx.ui.form.Button("GO").set({
+							paddingLeft:   4,
+							paddingRight:  4,
+							paddingTop:    2,
+							paddingBottom: 2,
+							alignY:        "center",
+							enabled:       true
+						});
+						this.autoRaidButton = btn;
+						this.goButton = btn;
+						btn.setToolTipText("AvaRaid yay!");
+						btn.addListener("execute", this.autoRaidPleaseToggle, this);
+						subContainer.add(btn);
+						this.commandContainer.add(subContainer);
 
-							// detect when user is idle
-							window.addEventListener('mousemove', function() {
-								ava.ui.RaidingWindow.getInstance().lastMouseMoveTime = webfrontend.Util.getCurrentTime().getTime();
-							}, false);
+						// detect when user is idle
+						window.addEventListener('mousemove', function() {
+							ava.ui.RaidingWindow.getInstance().lastMouseMoveTime = webfrontend.Util.getCurrentTime().getTime();
+						}, false);
 
-							subContainer = new qx.ui.container.Composite();
-							subContainer.setLayout(new qx.ui.layout.HBox().set({
-								spacing: 2
-							}));
-							sel = new qx.ui.form.SelectBox().set({
-								width:    80,
-								alignY:   "middle",
-								tabIndex: 6
-							});
-							sel.add(new qx.ui.form.ListItem("Once", null, webfrontend.gui.SendArmyWindow.timings.once - webfrontend.gui.SendArmyWindow.timings.once));
-							sel.add(new qx.ui.form.ListItem("Return", null, webfrontend.gui.SendArmyWindow.timings.latest - webfrontend.gui.SendArmyWindow.timings.once));
-							sel.add(new qx.ui.form.ListItem("Complete", null, webfrontend.gui.SendArmyWindow.timings.completed - webfrontend.gui.SendArmyWindow.timings.once));
-							sel.add(new qx.ui.form.ListItem("24 Hours", null, 8));
-							sel.add(new qx.ui.form.ListItem("72 Hours", null, 7));
-							sel.setSelection([sel.getChildren()[2]]);
-							sel.addListener("changeSelection", function(e) {
-								localStorage.setItem("mm__retOpts", e.getData()[0].getLabel());
-								var ch = this.getLayoutParent().getChildren();
-								var vis = "hidden";
-								if(e.getData()[0].getLabel() == "Return")
-									vis = "visible";
-								for(var i = 1; i <= 6; i++)
-									ch[i].setVisibility(vis);
-							});
-							sel.addListenerOnce("appear", function() {
-								SetSelectionFromStore(sel, "mm__retOpts");
-							}, sel);
-							subContainer.add(sel);
-							var tf = this.createHMSTextField(defVis, 7);
-							tf.addListenerOnce("appear", function() {
-								var value = localStorage.getItem("mm__retHr");
-								this.setValue(value != null ? value : "0");
-								if(this.getValue().length == 0) {
-									this.setValue("0");
-								}
-							}, tf);
+						subContainer = new qx.ui.container.Composite();
+						subContainer.setLayout(new qx.ui.layout.HBox().set({
+							spacing: 2
+						}));
+						sel = new qx.ui.form.SelectBox().set({
+							width:    80,
+							alignY:   "middle",
+							tabIndex: 6
+						});
+						sel.add(new qx.ui.form.ListItem("Once", null, webfrontend.gui.SendArmyWindow.timings.once - webfrontend.gui.SendArmyWindow.timings.once));
+						sel.add(new qx.ui.form.ListItem("Return", null, webfrontend.gui.SendArmyWindow.timings.latest - webfrontend.gui.SendArmyWindow.timings.once));
+						sel.add(new qx.ui.form.ListItem("Complete", null, webfrontend.gui.SendArmyWindow.timings.completed - webfrontend.gui.SendArmyWindow.timings.once));
+						sel.add(new qx.ui.form.ListItem("24 Hours", null, 8));
+						sel.add(new qx.ui.form.ListItem("72 Hours", null, 7));
+						sel.setSelection([sel.getChildren()[2]]);
+						sel.addListener("changeSelection", function(e) {
+							localStorage.setItem("mm__retOpts", e.getData()[0].getLabel());
+							var ch = this.getLayoutParent().getChildren();
+							var vis = "hidden";
+							if(e.getData()[0].getLabel() == "Return")
+								vis = "visible";
+							for(var i = 1; i <= 6; i++)
+								ch[i].setVisibility(vis);
+						});
+						sel.addListenerOnce("appear", function() {
+							SetSelectionFromStore(sel, "mm__retOpts");
+						}, sel);
+						subContainer.add(sel);
+						var tf = this.createHMSTextField(defVis, 7);
+						tf.addListenerOnce("appear", function() {
+							var value = localStorage.getItem("mm__retHr");
+							this.setValue(value != null ? value : "0");
+							if(this.getValue().length == 0) {
+								this.setValue("0");
+							}
+						}, tf);
 
-							console.warn("1");
-							tf.addListener("input", function() {
-								localStorage.setItem("mm__retHr", this.getValue());
-							}, tf);
-							subContainer.add(tf);
-							subContainer.add(new qx.ui.basic.Label(":").set({
-								visibility: defVis,
-								alignY:     "middle"
-							}));
-							console.warn("2");
-							var tf = this.createHMSTextField(defVis, 8);
-							tf.addListenerOnce("appear", function() {
-								var value = localStorage.getItem("mm__retMin");
-								this.setValue(value != null ? value : "0");
-								if(this.getValue().length == 0) {
-									this.setValue("0");
-								}
-							}, tf);
-							tf.addListener("input", function() {
-								localStorage.setItem("mm__retMin", this.getValue());
-							}, tf);
-							subContainer.add(tf);
-							subContainer.add(new qx.ui.basic.Label(":").set({
-								visibility: defVis,
-								alignY:     "middle"
-							}));
-							console.warn("3");
+						console.warn("1");
+						tf.addListener("input", function() {
+							localStorage.setItem("mm__retHr", this.getValue());
+						}, tf);
+						subContainer.add(tf);
+						subContainer.add(new qx.ui.basic.Label(":").set({
+							visibility: defVis,
+							alignY:     "middle"
+						}));
+						console.warn("2");
+						var tf = this.createHMSTextField(defVis, 8);
+						tf.addListenerOnce("appear", function() {
+							var value = localStorage.getItem("mm__retMin");
+							this.setValue(value != null ? value : "0");
+							if(this.getValue().length == 0) {
+								this.setValue("0");
+							}
+						}, tf);
+						tf.addListener("input", function() {
+							localStorage.setItem("mm__retMin", this.getValue());
+						}, tf);
+						subContainer.add(tf);
+						subContainer.add(new qx.ui.basic.Label(":").set({
+							visibility: defVis,
+							alignY:     "middle"
+						}));
+						console.warn("3");
 
-							var tf = this.createHMSTextField(defVis, 9);
-							tf.addListenerOnce("appear", function() {
-								var value = localStorage.getItem("mm__retSec");
-								this.setValue(value != null ? value : "0");
-								if(this.getValue().length == 0) {
-									this.setValue("0");
-								}
-							}, tf);
-							tf.addListener("input", function() {
-								localStorage.setItem("mm__retSec", this.getValue());
-							}, tf);
-							subContainer.add(tf);
-							sel = new qx.ui.form.SelectBox().set({
-								width:      100,
-								visibility: defVis,
-								alignY:     "middle",
-								tabIndex:   10
-							});
-							sel.add(new qx.ui.form.ListItem("7 days", null, 7));
-							sel.add(new qx.ui.form.ListItem("6 days", null, 6));
-							sel.add(new qx.ui.form.ListItem("5 days", null, 5));
-							sel.add(new qx.ui.form.ListItem("4 days", null, 4));
-							sel.add(new qx.ui.form.ListItem("3 days", null, 3));
-							sel.add(new qx.ui.form.ListItem("2 days", null, 2));
-							sel.add(new qx.ui.form.ListItem("Tomorrow", null, 1));
-							sel.add(new qx.ui.form.ListItem("Today", null, 0));
-							sel.setSelection([sel.getChildren()[7]]);
-							subContainer.add(sel);
-							sel.addListener("changeSelection", function(e) {
-								localStorage.setItem("mm__retDayOpts", e.getData()[0].getLabel());
-							});
-							SetSelectionFromStore(sel, "mm__retDayOpts");
-							var btn = new qx.ui.form.Button("Refresh").set({
-								paddingLeft:   5,
-								paddingRight:  5,
-								paddingTop:    0,
-								paddingBottom: 0
-							});
-							btn.addListener("click", this.findDungeons, this);
+						var tf = this.createHMSTextField(defVis, 9);
+						tf.addListenerOnce("appear", function() {
+							var value = localStorage.getItem("mm__retSec");
+							this.setValue(value != null ? value : "0");
+							if(this.getValue().length == 0) {
+								this.setValue("0");
+							}
+						}, tf);
+						tf.addListener("input", function() {
+							localStorage.setItem("mm__retSec", this.getValue());
+						}, tf);
+						subContainer.add(tf);
+						sel = new qx.ui.form.SelectBox().set({
+							width:      100,
+							visibility: defVis,
+							alignY:     "middle",
+							tabIndex:   10
+						});
+						sel.add(new qx.ui.form.ListItem("7 days", null, 7));
+						sel.add(new qx.ui.form.ListItem("6 days", null, 6));
+						sel.add(new qx.ui.form.ListItem("5 days", null, 5));
+						sel.add(new qx.ui.form.ListItem("4 days", null, 4));
+						sel.add(new qx.ui.form.ListItem("3 days", null, 3));
+						sel.add(new qx.ui.form.ListItem("2 days", null, 2));
+						sel.add(new qx.ui.form.ListItem("Tomorrow", null, 1));
+						sel.add(new qx.ui.form.ListItem("Today", null, 0));
+						sel.setSelection([sel.getChildren()[7]]);
+						subContainer.add(sel);
+						sel.addListener("changeSelection", function(e) {
+							localStorage.setItem("mm__retDayOpts", e.getData()[0].getLabel());
+						});
+						SetSelectionFromStore(sel, "mm__retDayOpts");
+						var btn = new qx.ui.form.Button("Refresh").set({
+							paddingLeft:   5,
+							paddingRight:  5,
+							paddingTop:    0,
+							paddingBottom: 0
+						});
+						btn.addListener("click", this.findDungeons, this);
-							console.debug("DP 9");
 
-							subContainer.add(btn);
-							var btn = new qx.ui.form.Button("Refresh All Types").set({
-								paddingLeft:   5,
-								paddingRight:  5,
-								paddingTop:    0,
-								paddingBottom: 0
-							});
-							btn.rw = this;
-							btn.addListener("click", ava.ui.RaidingWindow.findAllDungeons);
-							subContainer.add(btn);
-							this.commandContainer.add(subContainer);
-							container.add(this.commandContainer);
-							dungeonPage.add(container, {
-								edge: "south"
-							});
-							return dungeonPage;
+						subContainer.add(btn);
+						var btn = new qx.ui.form.Button("Refresh All Types").set({
+							paddingLeft:   5,
+							paddingRight:  5,
+							paddingTop:    0,
+							paddingBottom: 0
+						});
+						btn.rw = this;
+						btn.addListener("click", ava.ui.RaidingWindow.findAllDungeons);
+						subContainer.add(btn);
+						this.commandContainer.add(subContainer);
+						container.add(this.commandContainer);
+						dungeonPage.add(container, {
+							edge: "south"
+						});
+						return dungeonPage;
-						} catch(e) {
-							console.debug(e);
-							console.assert(false);
-						}
 					},
-					GetRaidGain:          function() {
+					GetRaidGain:            function() {
 						var atype = this.raidAddType.getSelection()[0].getLabel();
 						var mul = 1;
 						if(this.ratioMode == "none")
@@ -7616,7 +7502,7 @@
 						}
 						return mul;
 					},
-					getTotalCarry:        function(dType) {
+					getTotalCarry:          function(dType) {
 						var CI = webfrontend.data.City.getInstance();
 						var bS = webfrontend.res.Main.getInstance();
 						var totalCarry = 0;
@@ -7631,23 +7517,23 @@
 										}
 										delayedOrders[CI.unitOrders[ii].units[jj].type] += CI.unitOrders[ii].units[jj].count;
 									}
-									}
-								}
+								}
+							}
 							for(var key in CI.units) {
 								var carry = bS.units[key].c;
-									if(carry > 0 && ((bS.units[key].ls && dType != 2) || (!bS.units[key].ls && dType == 2))) {
-										var uinfo = CI.getUnitTypeInfo(key);
-										var cnt = uinfo[this.ratioMode] - this.getAllocatedUnits(key);
-										if((this.ratioMode != "total") && delayedOrders.hasOwnProperty(key)) {
-											cnt -= delayedOrders[parseInt(key)];
-										}
-										totalCarry = totalCarry + cnt * carry;
-									}
-								}
-							}
+								if(carry > 0 && ((bS.units[key].ls && dType != 2) || (!bS.units[key].ls && dType == 2))) {
+									var uinfo = CI.getUnitTypeInfo(key);
+									var cnt = uinfo[this.ratioMode] - this.getAllocatedUnits(key);
+									if((this.ratioMode != "total") && delayedOrders.hasOwnProperty(key)) {
+										cnt -= delayedOrders[parseInt(key)];
+									}
+									totalCarry = totalCarry + cnt * carry;
+								}
+							}
+						}
 						return totalCarry;
 					},
-					getTotalDefenseCarry: function(dType) {
+					getTotalDefenseCarry:   function(dType) {
 						var CI = webfrontend.data.City.getInstance();
 						var bS = webfrontend.res.Main.getInstance();
 						var totalCarry = 0;
@@ -7680,47 +7566,61 @@
 						}
 						return totalCarry;
 					},
-					isUnitDefense:        function(type) {
+					isUnitDefense:          function(type) {
 						var retVal = true;
 						switch(type) {
 							case "1":
-								case "2":
-								case "3":
-								case "4":
-								case "5":
-								case "8":
-								case "9":
-								case "10":
-								case "13":
-								case "14":
-								case "15":
-								case "16":
-								case "19":
-								case "77":
-									break;
-								default:
-									retVal = false;
-									break;
-							}
+							case "2":
+							case "3":
+							case "4":
+							case "5":
+							case "8":
+							case "9":
+							case "10":
+							case "13":
+							case "14":
+							case "15":
+							case "16":
+							case "19":
+							case "77":
+								break;
+							default:
+								retVal = false;
+								break;
+						}
 						return retVal;
 					},
-					isDefense:            function() {
+					isDefense:              function() {
 						var retVal = true;
-						for(var i = 0; i < CI.units.length; ++i) {
-							if(!isUnitDefense(CI.units(i)))
-								return false;
-
+						for(var key in CI.units) {
+							switch(key) {
+								case "1":
+								case "2":
+								case "3":
+								case "4":
+								case "5":
+								case "8":
+								case "9":
+								case "10":
+								case "13":
+								case "14":
+								case "15":
+								case "16":
+								case "19":
+								case "77":
+									break;
+								default:
+									retVal = false;
+									break;
-						}
+							}
-
-						return       true;
-
+						}
+						return retVal;
 					},
-					getUnitBonus:         function(unitType) {
+					getUnitBonus:           function(unitType) {
 						var research = webfrontend.data.Tech.getInstance().getBonus("unitDamage", webfrontend.data.Tech.research, Number(unitType));
 						var shrine = webfrontend.data.Tech.getInstance().getBonus("unitDamage", webfrontend.data.Tech.shrine, Number(unitType));
 						return (research + shrine) / 100;
 					},
-
 					getRemainingTs:         function(dType) {
 						var CI = webfrontend.data.City.getInstance();
 						var bS = webfrontend.res.Main.getInstance();
@@ -7962,7 +7862,7 @@
 											} else {
 												dArray.push([o.DungeonType, o.DungeonLevel, o.Progress, cordCont, dist, x, y, coord]);
 											}
-							}
+										}
 										// break;
 									}
 								}
@@ -8045,7 +7945,7 @@
 											ch[i].setReadOnly(readOnly);
 											ch[i].setEnabled(!readOnly);
 										}
-						}
+									}
 								}
 							}
 						}
@@ -8081,7 +7981,7 @@
 											}
 											totalCarry = totalCarry + (cnt * bS.units[hch[k].unitType].c);
 										}
-						}
+									}
 								}
 								for(var k = 0; k < hch.length; k++) {
 									if(hch[k] instanceof qx.ui.form.TextField) {
@@ -8094,7 +7994,7 @@
 											var cnt = Math.floor((lootToCarry / totalCarry) * tcnt);
 											hch[k].setValue(cnt.toString());
 										}
-						}
+									}
 								}
 							}
 						} else {
@@ -8124,7 +8024,7 @@
 											}
 											lootTotal = lootTotal + cnt * bS.units[hch[k].unitType].c;
 										}
-						}
+									}
 								}
 							}
 						}
@@ -8485,7 +8385,7 @@
 										if(hch[k].unitType == unitType) {
 											total += Number(hch[k].getValue());
 										}
-						}
+									}
 								}
 							}
 						}
@@ -8505,8 +8405,8 @@
 										if(Number(hch[k].getValue()) > 0) {
 											total++;
 											break;
-							}
-						}
+										}
+									}
 								}
 							}
 						}
@@ -8611,9 +8511,11 @@
 								}
 								this.pickAndSendRaids();
 								this.nextIdleRaidCity();
-							} else if(sTimeLeft < 10)
-								this.addRaidError("Player has not been idle for long.  Waiting " + sTimeLeft + "more seconds");
+							} else {
+								this.addRaidError("Player has been idle for long.  Waiting " + sTimeLeft + "more seconds");
+								// addRaidError("Idle .. " + sTimeLeft  );
-						}
+							}
+						}
 
 						var timeTillMoveCheck = (AvaRaidMode == 2) ? 5 * 1000 : 60 * 1000;
 
@@ -8626,7 +8528,6 @@
 							// This means that we have recieved a request to terminate
 							this.autoRaidButton.setTextColor("Yellow");
 							this.autoRaidButton.setEnabled(true);
-							this.addRaidError("The raiding threads are all asleep now.");
 							return;
 						}
 					},
@@ -8685,7 +8586,7 @@
 												c: Number(ch[i].getValue())
 											});
 										}
-						}
+									}
 								}
 
 								var updateManager = webfrontend.net.UpdateManager.getInstance();
@@ -9083,6 +8984,7 @@
 					}
 				}
 			});
+			;
 
 			function refreshItems() {
 				var dialog = ava.ui.PalaceItemsWindow.getInstance();
@@ -10162,1981 +10064,6 @@
 					}
 				}
 			});
-			const MIN_SEND_COMMAND_INTERVAL=500;
-
-			qx.Class.define("bos.Storage", {
-				type: "singleton",
-				extend: qx.core.Object,
-				construct: function() {
-					try {
-						qx.Bootstrap.setDisplayName(this, "bos.Storage");
-						this._player = webfrontend.data.Player.getInstance().getId();
-
-						var options = this._loadOptions();
-						if (options != null) {
-							if (options.optionsFormatVersion != bos.Storage.OPTIONS_FORMAT_VERSION) {
-								bos.Utils.handleError("This script version requires options to be in new format. Default values has been applied. Please set options again. Sorry for inconvenience");
-								this.deleteAllSavedData();
-								this.saveOptions(); //force saving defaults
-							} else {
-								this._applyOptions(options);
-							}
-						}
-
-						var saved = this.getSavedCities();
-						this._savedCities = [];
-						for (var i = 0; i < saved.length; i++) {
-							var cityId = saved[i];
-
-							this._savedCities["c" + cityId] = cityId;
-						}
-					} catch (e) {
-						bos.Utils.handleError("Error loading LoU BOS settings: " + e + ".\nIt may mean that you browser has disabled local storage.\nTo turn local storage on - in Firefox please open page 'about:config' and make sure that in 'dom.storage.enabled' you have true value. For Firefox please make sure that you have cookies enabled");
-					}
-				},
-				statics: {
-					OPTIONS_FORMAT_VERSION: 0
-				},
-				properties: {
-					persistingCitiesEnabled: {
-						init: true
-					},
-					loadPersistedCitiesAtStart: {
-						init: true
-					},
-					optionsFormatVersion: {
-						init: 0
-					},
-					loadTableSettingsAtStart: {
-						init: false
-					},
-					citiesTableSettings: {
-						init: null
-					},
-					militaryTableSettings: {
-						init: null
-					},
-					moonstonesTableSettings: {
-						init: null
-					},
-					moonglowTowers: {
-						init: []
-					},
-					customCityTypes: {
-						init: []
-					},
-					summaryPosition: {
-						init: null
-					},
-					tradeRoutesVersion: {
-						init: 0,
-						event: "changeTradeRoutesVersion"
-					},
-					recruitmentOrdersVersion: {
-						init: 0,
-						event: "changeRecruitmentOrdersVersion"
-					},
-					intelligenceVersion: {
-						init: 0,
-						event: "changeIntelligenceVersion"
-					},
-					customCityTypesVersion: {
-						init: 0,
-						event: "changeCustomCityTypesVersion"
-					},
-					tweakReportAtStart: {
-						init: false
-					},
-					tweakChatAtStart: {
-						init: false
-					},
-					startRefreshingResourcesAtStart: {
-						init: false
-					}
-				}, members: {
-					_savedCities: null,
-					_citiesWithMooglowTower: null,
-					_tradeRoutes: null,
-					_recruitmentOrders: null,
-					_intelligence: null,
-					_player: "",
-					_getValue: function(key, namespace) {
-						var result = localStorage.getItem(this._calculateKey(key, namespace, true));
-						if (result == null) {
-							result = localStorage.getItem(this._calculateKey(key, namespace, false));
-						}
-						return result;
-					},
-					_setValue: function(key, value, namespace) {
-						localStorage.getItem(this._calculateKey(key, namespace, true), value);
-					},
-					_calculateKey: function(key, namespace, withPlayer) {
-						if (namespace == undefined) {
-							namespace = "Storage";
-						}
-						if (withPlayer == undefined) {
-							withPlayer = true;
-						}
-						if (withPlayer) {
-							return "bos." + this._player + "." + namespace + "." + key;
-						} else {
-							return "bos." + namespace + "." + key;
-						}
-					},
-					_loadOptions: function() {
-						var json = this._getValue("options");
-						var options = null;
-						if (json != null) {
-							options = qx.lang.Json.parse(json);
-						}
-						return options;
-					},
-					_applyOptions: function(options) {
-						this.setOptionsFormatVersion(options.optionsFormatVersion);
-						this.setPersistingCitiesEnabled(options.persistingCitiesEnabled);
-						this.setLoadPersistedCitiesAtStart(options.loadPersistedCitiesAtStart);
-						this.setCitiesTableSettings(options.citiesTableSettings);
-						this.setMilitaryTableSettings(options.militaryTableSettings);
-						if (options.moonstonesTableSettings != undefined) {
-							this.setMoonstonesTableSettings(options.moonstonesTableSettings);
-						}
-						if (options.loadTableSettingsAtStart != undefined) {
-							this.setLoadTableSettingsAtStart(options.loadTableSettingsAtStart);
-						}
-						if (options.moonglowTowers != undefined) {
-							this.setMoonglowTowers(options.moonglowTowers);
-						}
-						if (options.customCityTypes != undefined) {
-							this.setCustomCityTypes(options.customCityTypes);
-						}
-						if (options.summaryPosition != undefined) {
-							this.setSummaryPosition(options.summaryPosition);
-						}
-						if (options.tweakReportAtStart != undefined) {
-							this.setTweakReportAtStart(options.tweakReportAtStart);
-						}
-						if (options.tweakChatAtStart != undefined) {
-							this.setTweakChatAtStart(options.tweakChatAtStart);
-						}
-						if (options.startRefreshingResourcesAtStart != undefined) {
-							this.setStartRefreshingResourcesAtStart(options.startRefreshingResourcesAtStart);
-						}
-					},
-					saveCity: function(city) {
-						var simple = city.toSimpleObject();
-						var json = qx.lang.Json.stringify(simple);
-						this._setValue(city.getId(), json, "City");
-
-						this._savedCities["c" + city.getId()] = city.getId();
-						this._saveSavedCities();
-					},
-					loadCity: function(cityId) {
-						var json = this._getValue(cityId, "City");
-						if (json == null)
-							return null;
-						var parsed = qx.lang.Json.parse(json);
-						var city = bos.City.createFromSimpleObject(parsed);
-						return city;
-					},
-					_calculateCityKey: function(cityId) {
-						return "bos.City." + cityId;
-					},
-					getSavedCities: function() {
-						var s = this._getValue("index", "City");
-						var cities = [];
-						if (s != null) {
-							cities = qx.lang.Json.parse(s);
-						}
-						return cities;
-					},
-					_saveSavedCities: function() {
-						var cities = [];
-						for (var key in this._savedCities) {
-							var cityId = parseInt(key.substring(1));
-							if (!isNaN(cityId)) {
-								cityId = parseInt(this._savedCities[key]);
-								if (!isNaN(cityId)) {
-									cities.push(cityId);
-								}
-							}
-						}
-
-						var json = qx.lang.Json.stringify(cities);
-						this._setValue("index", json, "City");
-					},
-					deleteAllSavedData: function() {
-						var saved = this.getSavedCities();
-						for (var i = 0; i < saved.length; i++) {
-							var cityId = saved[i];
-							localStorage.deleteItem(Item(this._calculateKey(cityId, "City")));
-						}
-						localStorage.deleteItem(this._calculateKey("index", "City"));
-
-						this._savedCities = [];
-					},
-					saveOptions: function() {
-						var o = {
-							persistingCitiesEnabled: this.getPersistingCitiesEnabled(),
-							loadPersistedCitiesAtStart: this.getLoadPersistedCitiesAtStart(),
-							tweakChatAtStart: this.getTweakChatAtStart(),
-							tweakReportAtStart: this.getTweakReportAtStart(),
-							startRefreshingResourcesAtStart: this.getStartRefreshingResourcesAtStart(),
-
-							loadTableSettingsAtStart: this.getLoadTableSettingsAtStart(),
-							citiesTableSettings: this.getCitiesTableSettings(),
-							militaryTableSettings: this.getMilitaryTableSettings(),
-							moonstonesTableSettings: this.getMoonstonesTableSettings(),
-							summaryPosition: this.getSummaryPosition(),
-
-							moonglowTowers: this.getMoonglowTowers(),
-							customCityTypes: this.getCustomCityTypes(),
-							optionsFormatVersion: bos.Storage.OPTIONS_FORMAT_VERSION
-						}
-						var json = qx.lang.Json.stringify(o);
-						this._setValue("options", json);
-
-					},
-					setTableSettings: function(settings, tableName) {
-						//not the best way to do it
-						switch (tableName) {
-							case "cities":
-								this.setCitiesTableSettings(settings);
-								break;
-							case "military":
-								this.setMilitaryTableSettings(settings);
-								break;
-							case "moonstones":
-								this.setMoonstonesTableSettings(settings);
-								break;
-							default:
-								bos.Utils.handleError("Unknown table name " + tableName);
-								break;
-						}
-					},
-					addMoonglowTower: function(cityId, towerId) {
-						for (var i = 0; i < this.getMoonglowTowers().length; i++) {
-							var o = this.getMoonglowTowers()[i];
-							if (o.cityId == cityId) {
-								o.towerId = towerId;
-								this.saveOptions();
-								return;
-							}
-						}
-						var t = {
-							cityId: cityId,
-							towerId: towerId
-						};
-						this.getMoonglowTowers().push(t);
-						this._citiesWithMooglowTower = null;
-						this.saveOptions();
-					},
-					removeMoonglowTower: function(cityId) {
-						for (var i = 0; i < this.getMoonglowTowers().length; i++) {
-							var o = this.getMoonglowTowers()[i];
-							if (o.cityId == cityId) {
-								this.getMoonglowTowers().splice(i, 1);
-								this._citiesWithMooglowTower = null;
-								this.saveOptions();
-								return;
-							}
-						}
-					},
-					findMoonglowTowerId: function(cityId) {
-						var withMoonglow = this.getCitiesWithMooglowTower();
-						if (withMoonglow["c" + cityId] == undefined) {
-							return -1;
-						} else {
-							return withMoonglow["c" + cityId];
-						}
-						/*
-						 for (var i = 0; i < this.getMoonglowTowers().length; i++) {
-						 var o = this.getMoonglowTowers()[i];
-						 if (o.cityId == cityId) {
-						 return o.towerId;
-						 }
-						 }
-						 return -1;
-						 */
-					},
-					getCitiesWithMooglowTower: function() {
-						if (this._citiesWithMooglowTower == null) {
-							this._citiesWithMooglowTower = [];
-							for (var i = 0; i < this.getMoonglowTowers().length; i++) {
-								var o = this.getMoonglowTowers()[i];
-								this._citiesWithMooglowTower["c" + o.cityId] = o.towerId;
-							}
-						}
-						return this._citiesWithMooglowTower;
-					},
-					addCustomCityType: function(letter, description) {
-						for (var i = 0; i < this.getCustomCityTypes().length; i++) {
-							var o = this.getCustomCityTypes()[i];
-							if (o.letter == letter) {
-								o.description = description;
-								return;
-							}
-						}
-						var t = {
-							letter: letter,
-							description: description
-						};
-						this.getCustomCityTypes().push(t);
-
-						this.setCustomCityTypesVersion(this.getCustomCityTypesVersion() + 1);
-					},
-					removeCustomCityType: function(letter) {
-						for (var i = 0; i < this.getCustomCityTypes().length; i++) {
-							var o = this.getCustomCityTypes()[i];
-							if (o.letter == letter) {
-								this.getCustomCityTypes().splice(i, 1);
-								return;
-							}
-						}
-
-						this.setCustomCityTypesVersion(this.getCustomCityTypesVersion() + 1);
-					},
-					loadTradeRoutes: function() {
-						this._tradeRoutes = [];
-						var json = this._getValue("tradeRoutes");
-						if (json != null) {
-							this._tradeRoutes = qx.lang.Json.parse(json);
-						}
-						return this._tradeRoutes;
-					},
-					getTradeRoutes: function() {
-						if (this._tradeRoutes == null) {
-							this.loadTradeRoutes();
-						}
-						return this._tradeRoutes;
-					},
-					saveTradeRoutes: function() {
-						var json = qx.lang.Json.stringify(this._tradeRoutes);
-						this._setValue("tradeRoutes", json);
-					},
-					addTradeRoute: function(route) {
-						route.id = this._tradeRoutes.length + 1;
-						this._tradeRoutes.push(route);
-						this.setTradeRoutesVersion(this.getTradeRoutesVersion() + 1);
-						this.saveTradeRoutes();
-						return route.id;
-					},
-					removeTradeRoute: function(routeId) {
-						for (var i = 0; i < this._tradeRoutes.length; i++) {
-							var r = this._tradeRoutes[i];
-							if (r.id == routeId) {
-								this._tradeRoutes.splice(i, 1);
-								this.setTradeRoutesVersion(this.getTradeRoutesVersion() + 1);
-								this.saveTradeRoutes();
-								return true;
-							}
-						}
-						return false;
-					},
-					findTradeRouteById: function(routeId) {
-						for (var i = 0; i < this._tradeRoutes.length; i++) {
-							var r = this._tradeRoutes[i];
-							if (r.id == routeId) {
-								return r;
-							}
-						}
-						return null;
-					},
-					importTradeRoutes: function(json) {
-						try {
-							var required = ["from", "to", "wood", "stone", "iron", "food", "transport", "group"];
-							var orders = qx.lang.Json.parse(json);
-							for (var i = 0; i < orders.length; i++) {
-								var order = orders[i];
-								for (var j = 0; j < required.length; j++) {
-									var prop = required[j];
-									if (!order.hasOwnProperty(prop)) {
-										bos.Utils.handleError("Element " + i + " is missing required property " + prop);
-										dumpObject(order);
-										return;
-									}
-								}
-							}
-
-							this._tradeRoutes = orders;
-							this.saveTradeRoutes();
-						} catch (e) {
-							bos.Utils.handleError(e);
-						}
-					},
-					loadRecruitmentOrders: function() {
-						this._recruitmentOrders = [];
-						var json = this._getValue("recruitmentOrders");
-						if (json != null) {
-							this._recruitmentOrders = qx.lang.Json.parse(json);
-						}
-						return this._recruitmentOrders;
-					},
-					getRecruitmentOrders: function() {
-						if (this._recruitmentOrders == null) {
-							this.loadRecruitmentOrders();
-						}
-						return this._recruitmentOrders;
-					},
-					saveRecruitmentOrders: function() {
-						var json = qx.lang.Json.stringify(this._recruitmentOrders);
-						this._setValue("recruitmentOrders", json);
-					},
-					addRecruitmentOrder: function(order) {
-						this._recruitmentOrders.push(order);
-						this.setRecruitmentOrdersVersion(this.getRecruitmentOrdersVersion() + 1);
-						this.saveRecruitmentOrders();
-					},
-					removeRecruitmentOrder: function(cityId) {
-						for (var i = 0; i < this._recruitmentOrders.length; i++) {
-							var o = this._recruitmentOrders[i];
-							if (o.cityId == cityId) {
-								this._recruitmentOrders.splice(i, 1);
-								this.setRecruitmentOrdersVersion(this.getRecruitmentOrdersVersion() + 1);
-								this.saveRecruitmentOrders();
-								return true;
-							}
-						}
-						return false;
-					},
-					findRecruitmentOrderById: function(cityId) {
-						for (var i = 0; i < this.getRecruitmentOrders().length; i++) {
-							var o = this.getRecruitmentOrders()[i];
-							if (o.cityId == cityId) {
-								return o;
-							}
-						}
-						return null;
-					},
-					importRecruitmentOrders: function(json) {
-						try {
-							var required = ["cityId", "units"];
-							var orders = qx.lang.Json.parse(json);
-							for (var i = 0; i < orders.length; i++) {
-								var order = orders[i];
-								for (var j = 0; j < required.length; j++) {
-									var prop = required[j];
-									if (!order.hasOwnProperty(prop)) {
-										bos.Utils.handleError("Element " + i + " is missing required property " + prop);
-										dumpObject(order);
-										return;
-									}
-								}
-							}
-
-							this._recruitmentOrders = orders;
-							this.saveRecruitmentOrders();
-						} catch (e) {
-							bos.Utils.handleError(e);
-						}
-					},
-
-					loadIntelligence: function() {
-						this._intelligence = [];
-						var json = this._getValue("intelligence");
-						if (json != null) {
-							this._intelligence = qx.lang.Json.parse(json);
-						}
-						return this._intelligence;
-					},
-					getIntelligence: function() {
-						if (this._intelligence == null) {
-							this.loadIntelligence();
-						}
-						return this._intelligence;
-					},
-					saveIntelligence: function() {
-						var json = qx.lang.Json.stringify(this._intelligence);
-						this._setValue("intelligence", json);
-					},
-					addIntelligence: function(intel) {
-						this.getIntelligence().push(intel);
-						this.setIntelligenceVersion(this.getIntelligenceVersion() + 1);
-						this.saveIntelligence();
-					},
-					removeIntelligence: function(cityId) {
-						for (var i = 0; i < this._intelligence.length; i++) {
-							var o = this._intelligence[i];
-							if (o.cityId == cityId) {
-								this._intelligence.splice(i, 1);
-								this.setIntelligenceVersion(this.getIntelligenceVersion() + 1);
-								this.saveIntelligence();
-								return true;
-							}
-						}
-						return false;
-					},
-					findIntelligenceById: function(cityId) {
-						for (var i = 0; i < this.getIntelligence().length; i++) {
-							var o = this.getIntelligence()[i];
-							if (o.cityId == cityId) {
-								return o;
-							}
-						}
-						return null;
-					},
-					mergeIntelligence: function(json) {
-						try {
-							var required = ["cityId", "name", "isLandlocked", "hasCastle", "owner", "description", "lastModified", "modifiedBy"];
-							var intelligence = qx.lang.Json.parse(json);
-							for (var i = 0; i < intelligence.length; i++) {
-								var intel = intelligence[i];
-								for (var j = 0; j < required.length; j++) {
-									var prop = required[j];
-									if (!intel.hasOwnProperty(prop)) {
-										bos.Utils.handleError("Element " + i + " is missing required property " + prop);
-										dumpObject(intel);
-										return;
-									}
-								}
-							}
-
-							for (var i = 0; i < intelligence.length; i++) {
-								var intel = intelligence[i];
-								var old = this.findIntelligenceById(intel.cityId);
-								if (old == null) {
-									this.addIntelligence(intel);
-								} else if (intel.lastModified > old.lastModified) {
-									if (confirm("Would you like to replace intel for '" + old.name + "' - '" + old.description + "' with '" + intel.description + "'?")) {
-										for (var j = 0; j < this.getIntelligence().length; j++) {
-											var o = this.getIntelligence()[j];
-											if (o.cityId == intel.cityId) {
-												this.getIntelligence()[j] = intel;
-												break;
-											}
-										}
-									}
-								}
-							}
-
-							this.saveIntelligence();
-							this.setIntelligenceVersion(this.getIntelligenceVersion() + 1);
-						} catch (e) {
-							bos.Utils.handleError(e);
-						}
-					},
-					getPurifyOptions: function() {
-						var json = this._getValue("purifyOptions");
-						var options;
-						if (json != null) {
-							options = qx.lang.Json.parse(json);
-						} else {
-							options = {
-								includeCastles: false,
-								useRecruitmentData: false,
-								ministerBuildPresent: webfrontend.data.Player.getInstance().getMinisterTradePresent()
-							};
-
-							if (options.ministerBuildPresent) {
-								options.minimumResLevels = [0, 20, 20, 20, 20];
-							} else {
-								options.minimumResLevels = [0, 50000, 50000, 50000, 50000];
-							}
-						}
-						return options;
-					},
-					savePurifyOptions: function(options) {
-						options.ministerBuildPresent = webfrontend.data.Player.getInstance().getMinisterTradePresent();
-						var json = qx.lang.Json.stringify(options);
-						this._setValue("purifyOptions", json);
-					}
-				}
-			});
-
-			qx.Class.define("bos.Utils", {
-				type: "singleton",
-				extend: qx.core.Object,
-				statics: {
-					_popupsCount: 0,
-					convertCoordinatesToId: function(x, y) {
-						var id = parseInt(x, 10) | (parseInt(y, 10) << 16);
-						return id;
-					},
-					convertIdToCoodrinates: function(id) {
-						var o = this.convertIdToCoordinatesObject(id);
-						return o.xPos + ":" + o.yPos;
-					},
-					convertIdToCoordinatesObject: function(id) {
-						var o = {
-							xPos: (id & 0xFFFF),
-							yPos: (id >> 16),
-						}
-						o.cont = webfrontend.data.Server.getInstance().getContinentFromCoords(o.xPos, o.yPos);
-						return o;
-					},
-					extractCoordsFromClickableLook: function(pos) {
-						if (pos == null)
-							return null;
-
-						if (pos.substring != undefined) {
-							var startPos = pos.indexOf("\">");
-							var endPos = pos.indexOf("</div>");
-							if (startPos < endPos) {
-								var coords = pos.substring(startPos + 2, endPos);
-								var spacePos = pos.indexOf(" ");
-								if (spacePos > 0) {
-									coords = coords.substring(spacePos);
-								}
-								return coords;
-							} else {
-								return pos;
-							}
-						}
-						return pos;
-					},
-					translateOrderType: function(type) {
-						switch(type) {
-							case 0:
-								return qx.locale.Manager.tr("tnf:unknown");
-							case 1:
-								return qx.locale.Manager.tr("tnf:scout");
-							case 2:
-								return qx.locale.Manager.tr("tnf:plunder");
-							case 3:
-								return qx.locale.Manager.tr("tnf:assult");
-							case 4:
-								return qx.locale.Manager.tr("tnf:support");
-							case 5:
-								return qx.locale.Manager.tr("tnf:siege");
-							case 8:
-								return qx.locale.Manager.tr("tnf:raid");
-							case 9:
-								return qx.locale.Manager.tr("tnf:settle");
-							case 10:
-								return qx.locale.Manager.tr("tnf:boss raid");
-							case -2:
-								return "PvP";
-						}
-						return "??? " + type;
-					},
-					translateArray: function(arr) {
-						var translated = [];
-						for (var i = 0; i < arr.length; i++) {
-							translated.push(tr(arr[i]));
-						}
-						return translated;
-					},
-					createCitiesGroupsSelectBox: function() {
-						var sb = new qx.ui.form.SelectBox().set({
-							width: 120,
-							height: 28
-						});
-
-						sb.setToolTipText(tr("filter by: city group"));
-
-						return sb;
-					},
-					populateCitiesGroupsSelectBox: function(sb) {
-						if (sb == null) {
-							return;
-						}
-						sb.removeAll();
-						if (webfrontend.data.Player.getInstance().citygroups != undefined) {
-							var groups = webfrontend.data.Player.getInstance().citygroups;
-							for (var i = 0, iCount = groups.length; i < iCount; i++) {
-								var item = groups[i];
-								sb.add(new qx.ui.form.ListItem(item.n, null, "cg" + item.i));
-							}
-						}
-					},
-					createCitiesTypesSelectBox: function() {
-						var sb = new qx.ui.form.SelectBox().set({
-							width: 120,
-							height: 28
-						});
-
-						sb.setToolTipText(tr("filter by: city types"));
-
-						return sb;
-					},
-					populateCitiesTypesSelectBox: function(sb, onlyMilitary, onlyBosTypes) {
-						if (sb == null) {
-							return;
-						}
-
-						if (onlyMilitary == undefined) {
-							onlyMilitary = false;
-						}
-
-						if (onlyBosTypes == undefined) {
-							onlyBosTypes = false;
-						}
-
-						sb.removeAll();
-
-						sb.add(new qx.ui.form.ListItem(tr("all"), null, "A"));
-
-						if (!onlyBosTypes && webfrontend.data.Player.getInstance().citygroups != undefined) {
-							var groups = webfrontend.data.Player.getInstance().citygroups;
-							for (var i = 0, iCount = groups.length; i < iCount; i++) {
-								var item = groups[i];
-								sb.add(new qx.ui.form.ListItem(item.n, null, "cg" + item.i));
-							}
-						}
-
-						if (!onlyMilitary) {
-							sb.add(new qx.ui.form.ListItem(tr("building"), null, "B"));
-						}
-						sb.add(new qx.ui.form.ListItem(tr("castles"), null, "C"));
-						sb.add(new qx.ui.form.ListItem(tr("defensive"), null, "D"));
-
-						if (!onlyMilitary) {
-							sb.add(new qx.ui.form.ListItem(tr("warehouses"), null, "W"));
-							sb.add(new qx.ui.form.ListItem(tr("moonstones"), null, "M"));
-							sb.add(new qx.ui.form.ListItem(tr("gold"), null, "G"));
-							var list = bos.Storage.getInstance().getCustomCityTypes();
-							for (var i = 0; i < list.length; i++) {
-								var item = list[i];
-								sb.add(new qx.ui.form.ListItem(item.description, null, item.letter));
-							}
-						}
-					},
-					isCityInCityGroup: function(cityId, groupId) {
-						if (webfrontend.data.Player.getInstance().citygroups == undefined) {
-							return false;
-						}
-						var groups = webfrontend.data.Player.getInstance().citygroups;
-						for (var i = 0, iCount = groups.length; i < iCount; i++) {
-							var item = groups[i];
-							if (item.i == groupId) {
-								for (var j = 0, jCount = item.c.length; j < jCount; j++) {
-									if (item.c[j] == cityId) {
-										return true;
-									}
-								}
-								break;
-							}
-						}
-
-						return false;
-					},
-					shouldCityBeIncluded: function(city, selectedCityType, selectedContinent) {
-
-						if (selectedCityType != null && selectedCityType != "A") {
-							if (selectedCityType.indexOf("cg") == 0) {
-								var groupId = parseInt(selectedCityType.substring(2));
-								var cityId = bos.Utils.convertCoordinatesToId(city.xPos, city.yPos);
-								if (bos.Utils.isCityInCityGroup(cityId, groupId) == false) {
-									return false;
-								}
-							} else {
-								var type = bos.CityTypes.getInstance().parseReference(city.reference);
-								switch (selectedCityType) {
-									case 'C':
-										if (!type.isCastle) return false;
-										break;
-									case 'B':
-										if (!type.isBuildInProgress) return false;
-										break;
-									case 'W':
-										if (!type.isWarehouse) return false;
-										break;
-									case 'M':
-										if (!type.hasMoonglowTower) return false;
-										break;
-									case 'G':
-										if (!type.isGold) return false;
-										break;
-									case 'D':
-										if (!type.isDefensive) return false;
-										break;
-									default:
-										if (type.customTypes.indexOf(selectedCityType) < 0) return false;
-										break;
-								}
-							}
-						}
-
-						if (selectedContinent != null && selectedContinent != "A") {
-							var cont = webfrontend.data.Server.getInstance().getContinentFromCoords(city.xPos, city.yPos);
-							if (parseInt(selectedContinent) != cont) {
-								return false;
-							}
-						}
-
-						return true;
-					},
-					createCitiesContinentsSelectBox: function() {
-						var sb = new qx.ui.form.SelectBox().set({
-							width: 60,
-							height: 28
-						});
-						var cities = webfrontend.data.Player.getInstance().cities;
-
-						sb.setToolTipText("Filter by: <b>continents</b>");
-
-						var continents = [];
-						for (var cityId in cities) {
-							var city = cities[cityId];
-
-							var cont = webfrontend.data.Server.getInstance().getContinentFromCoords(city.xPos, city.yPos);
-							continents["c" + cont] = true;
-						}
-
-						var list = [];
-						for (var key in continents) {
-							if (key.substring != undefined && qx.lang.Type.isString(key)) {
-								var cont = parseInt(key.substring(1), 10);
-								if (!isNaN(cont)) {
-									list.push(cont);
-								}
-							}
-						}
-						list.sort();
-
-						sb.add(new qx.ui.form.ListItem(tr("all"), null, "A"));
-						for (var i = 0; i < list.length; i++) {
-							var cont = list[i];
-							sb.add(new qx.ui.form.ListItem(sprintf("C%02d", cont), null, cont));
-						}
-
-						return sb;
-					},
-					makeClickable: function(msg, color) {
-						return qx.lang.String.format("<div style=\"cursor:pointer;color:%1\">%2</div>", [color, msg]);
-					},
-					makeColorful: function(msg, color) {
-						return qx.lang.String.format("<font color=\"%1\">%2</font>", [color, msg]);
-					},
-					handleError: function(message) {
-						//TODO make it nicer than alert box (webfrontend.gui.ConfirmationWidget)
-						bos.Utils._alert(message);
-					},
-					handleWarning: function(message) {
-						bos.Utils._alert(message);
-					},
-					handleInfo: function(message) {
-						alert(message);
-					},
-					_alert: function(message) {
-						if (bos.Utils._popupsCount < bos.Const.MAX_POPUPS) {
-							alert(message);
-							bos.Utils._popupsCount++;
-						}
-					},
-					displayLongText: function(body) {
-						var dialog = new webfrontend.gui.ConfirmationWidget();
-						//dialog.setZIndex(100000);
-						var bgImg = new qx.ui.basic.Image("webfrontend/ui/bgr_popup_survey.gif");
-						dialog.dialogBackground._add(bgImg, {left: 0, top: 0});
-						var shrStr = new qx.ui.form.TextArea(body).set({allowGrowY: true, tabIndex: 303});
-						dialog.dialogBackground._add(shrStr, {left: 30, top: 50, width: 90, height: 45});
-						shrStr.selectAllText();
-						var okButton = new qx.ui.form.Button("OK");
-						okButton.setWidth(120);
-						okButton.addListener("click", function(){dialog.disable();}, false);
-						dialog.dialogBackground._add(okButton, {left: 445, top: 190});
-						qx.core.Init.getApplication().getDesktop().add(dialog, {left: 0, right: 0, top: 0, bottom: 0});
-						dialog.show();
-					},
-					inputLongText: function(callback) {
-						var dialog = new webfrontend.gui.ConfirmationWidget();
-						//dialog.setZIndex(100000);
-						var bgImg = new qx.ui.basic.Image("webfrontend/ui/bgr_popup_survey.gif");
-						dialog.dialogBackground._add(bgImg, {left: 0, top: 0});
-						var shrStr = new qx.ui.form.TextArea("").set({allowGrowY: true, tabIndex: 303});
-						dialog.dialogBackground._add(shrStr, {left: 30, top: 50, width: 90, height: 45});
-						shrStr.selectAllText();
-						var okButton = new qx.ui.form.Button("OK");
-						okButton.setWidth(120);
-						okButton.addListener("click", function(){dialog.disable(); callback(shrStr.getValue()) }, false);
-						dialog.dialogBackground._add(okButton, {left: 445, top: 190});
-						qx.core.Init.getApplication().getDesktop().add(dialog, {left: 0, right: 0, top: 0, bottom: 0});
-						dialog.show();
-					},
-					getDistance: function(x1, y1, x2, y2) {
-						var diffX = Math.abs(x1 - x2);
-						var diffY = Math.abs(y1 - y2);
-						return Math.sqrt(diffX * diffX + diffY * diffY);
-					},
-					getDistanceUsingIds: function(id1, id2) {
-						var c1 = this.convertIdToCoodrinates(id1);
-						var c2 = this.convertIdToCoodrinates(id2);
-						return this.getDistance(c1.xPos, c1.yPos, c2.xPos, c2.yPos);
-					},
-					summaryWidget: function() {
-						return summaryWidget;
-					},
-					showAllianceInfo: function(o) {
-						var a = qx.core.Init.getApplication();
-						a.showAllianceInfo(webfrontend.gui.Alliance.Info.MainWindow.tabs.info, o);
-					},
-					showProgressDialog: function(message) {
-						var dialog = new webfrontend.gui.ConfirmationWidget();
-						dialog.showInProgressBox(message);
-						qx.core.Init.getApplication().getDesktop().add(dialog, {
-							left: 0,
-							right: 0,
-							top: 0,
-							bottom: 0
-						});
-						dialog.show();
-						return dialog;
-					},
-					hideProgressDialog: function(dialog) {
-						if (dialog != null) {
-							dialog.disable();
-							dialog.destroy();
-						}
-					}
-				}
-			});
-			qx.Class.define("bos.Server", {
-				extend: qx.core.Object,
-				type: "singleton",
-				construct: function() {
-					//webfrontend.base.Timer.getInstance().addListener("uiTick", this.updateCity, this);
-					//webfrontend.data.City.getInstance().addListener("changeCity", this.onCityChanged, this);
-					webfrontend.data.City.getInstance().addListener("changeVersion", this.updateCity, this);
-
-					this.persistCityTimer = new qx.event.Timer(5500);
-					this.persistCityTimer.addListener("interval", this._persistPendingCity, this);
-					this.persistCityTimer.start();
-
-					this._pollCityTimer = new qx.event.Timer(MIN_SEND_COMMAND_INTERVAL);
-					this._pollCityTimer.addListener("interval", this._pollNextCity, this);
-				},
-				properties: {
-					lastUpdatedCityId: {
-						init: false,
-						event: "bos.data.changeLastUpdatedCityId"
-					},
-					lastUpdatedCityAt: {
-						init: false
-					},
-					cityResourcesUpdateTime: {
-						init: null,
-						event: "bos.data.changeCityResourcesUpdateTime"
-					}
-				},
-				members: {
-					cities: new Object(),
-					cityResources: new Object(),
-					como: new Object(),
-					_citiesToPoll: new Array(),
-					_citiesToPersist: new Array(),
-					_dirtyCities: new Object(),
-					persistCityTimer: null,
-					_pollCitiesProgressDialog: null,
-					sectors: new Object(),
-					onCityChanged: function() {
-						var city = webfrontend.data.City.getInstance();
-
-						if (city.getId() == -1) {
-							return;
-						}
-						this.markCityDirty(city.getId());
-					},
-					markCityDirty: function(s) {
-						var cityId = parseInt(s, 10);
-						var dirty = this._dirtyCities[cityId] || false;
-						if (!dirty) {
-							this._dirtyCities[cityId] = true;
-							this._citiesToPersist.push(cityId);
-						}
-					},
-					_persistPendingCity: function() {
-						if (this._citiesToPersist.length == 0) {
-							return;
-						}
-						var cityId = this._citiesToPersist[0];
-						this._dirtyCities[cityId] = false;
-						this._citiesToPersist.splice(0, 1);
-						this.persistCity(cityId);
-						return;
-					},
-					persistCity: function(cityId) {
-paDebug("perollallcities");
-
-						if (!bos.Storage.getInstance().getPersistingCitiesEnabled()) {
-							return;
-						}
-						var prevCity = this.cities[cityId];
-						if (prevCity != null) {
-							try {
-								bos.Storage.getInstance().saveCity(prevCity);
-							} catch (e) {
-								bos.Storage.getInstance().setPersistingCitiesEnabled(false);
-								paError("Error when trying to persist city " + prevCity.getName() + ". Persisting has been disabled. Error: " + e);
-							}
-						}
-					},
-					persistAllPendingCities: function() {
-						if (confirm("there are " + this._citiesToPersist.length + " cities to be saved, continue?")) {
-							var count = 0;
-							while (this._citiesToPersist.length > 0) {
-								this._persistPendingCity();
-								count++;
-							}
-							alert("Persisted " + count + " cities");
-						}
-					},
-					pollCities: function(citiesToPoll) {
-						this._citiesToPoll = citiesToPoll;
-
-						this._disposePollCitiesProgressDialog();
-						this._pollCitiesProgressDialog = new webfrontend.gui.ConfirmationWidget();
-						this._pollCitiesProgressDialog.showInProgressBox(("cities to fetch: ") + this._citiesToPoll.length);
-						qx.core.Init.getApplication().getDesktop().add(this._pollCitiesProgressDialog, {
-							left: 0,
-							right: 0,
-							top: 0,
-							bottom: 0
-						});
-						this._pollCitiesProgressDialog.show();
-
-						this._pollCityTimer.start();
-					},
-					pollAllCities: function() {
-paDebug("pollallcities");
-						var citiesToPoll = [];
-
-						var cities = webfrontend.data.Player.getInstance().cities;
-						for (var cityId in cities) {
-							if (qx.lang.Type.isNumber(cityId)) {
-								citiesToPoll.push(cityId);
-							}
-						}
-
-						this.pollCities(citiesToPoll);
-					},
-					_disposePollCitiesProgressDialog: function() {
-						if (this._pollCitiesProgressDialog != null) {
-							this._pollCitiesProgressDialog.disable();
-							this._pollCitiesProgressDialog.destroy();
-							this._pollCitiesProgressDialog = null;
-						}
-					},
-					_pollNextCity: function() {
-paDebug("pollnextCtiy");
-						if (this._citiesToPoll.length > 0) {
-							var cityId = this._citiesToPoll[0];
-							this._citiesToPoll.splice(0, 1);
-							bos.net.CommandManager.getInstance().pollCity(cityId);
-
-							this._pollCitiesProgressDialog.showInProgressBox(tr("cities to fetch: ") + this._citiesToPoll.length);
-						} else {
-							this._pollCityTimer.stop();
-							this._disposePollCitiesProgressDialog();
-						}
-					},
-					updateCity: function() {
-paDebug("update");
-
-						var city = webfrontend.data.City.getInstance();
-
-						if (city.getId() == -1) {
-							return;
-						}
-
-//paError(city.getId() + " " + city.getVersion());
-
-						//do not update the same city too often
-						/*
-						 if (this.getLastUpdatedCityId() != null && this.getLastUpdatedCityId() == city.getId()) {
-						 var diff = new Date() - this.getLastUpdatedCityAt();
-						 if (diff < 10) {
-						 return;
-						 }
-						 }
-						 */
-						var c = new bos.City();
-						c.populate(city);
-						if (this.cities[c.getId()] != undefined) {
-							//alert("DELETE");
-							this.cities[c.getId()].dispose();
-							//this._disposeObjects(this.cities[c.getId()]);
-							//delete this.cities[c.getId()];
-						}
-						console.debug("updatecityend" + city);
-						this.cities[c.getId()] = c;
-
-						this.setLastUpdatedCityId(c.getId());
-						this.setLastUpdatedCityAt(new Date());
-
-						this.markCityDirty(city.getId());
-					},
-					addCOMOItem: function(item) {
-					console.debug("como");
-						this.como[item.i] = item;
-						this.updateCityFromCOMOItem(item);
-					},
-					updateCityFromCOMOItem: function(item) {
-						console.debug("comoset" + item);
-						if (this.cities[item.i] == undefined) {
-							return;
-						}
-						var city = this.cities[item.i];
-						city.units = new Object();
-						city.unitOrders = new Array();
-
-						for (var i = 0; i < item.c.length; i++) {
-							var command = item.c[i];
-							var units = new Array();
-							for (var j = 0; j < command.u.length; j++) {
-								var unit = command.u[j];
-
-								if (command.i == 0) {
-									city.units[unit.t] = {
-										count: unit.c,
-										total: unit.c,
-										speed: -1
-									};
-								} else {
-									var cityUnits = city.units[unit.t];
-									if (cityUnits == undefined) {
-										city.units[unit.t] = {
-											count: 0,
-											total: 0,
-											speed: -1
-										}
-										cityUnits = city.units[unit.t];
-									}
-									if (command.d == 0) {
-										//delayed order cannot increase troop count
-										cityUnits.total += unit.c;
-									}
-								}
-
-								units.push({
-									type: unit.t,
-									count: unit.c
-								});
-							}
-
-							if (command.i != 0) {
-								//{"i":26722474,"t":8,"s":2,"cn":"Mountain:9","c":7995428,"pn":"","p":0,"e":19024467,"d":0,"q":0,"r":1,"u":[{"t":6,"c":129237}]}]},
-
-								var order = {
-									id: command.i,
-									type: command.t,
-									state: command.s,
-									//start: command.ss,
-									start: null,
-									end: command.e,
-									city: command.c,
-									cityName: command.cn,
-									player: command.p,
-									playerName: command.pn,
-									//alliance: command.a,
-									//allianceName: command.an,
-									units: units,
-									isDelayed: command.d,
-									recurringType: command.r,
-									//recurringEndStep: command.rs,
-									quickSupport: command.q
-								};
-								city.unitOrders.push(order);
-							}
-						}
-					}
-				}
-			});
-			/** most of code of this class is taken from game source code */
-			qx.Class.define("bos.City", {
-				extend: qx.core.Object,
-				construct: function() {
-					qx.Bootstrap.setDisplayName(this, "bos.City");
-					this.resources = new Object();
-					this.setId(-1);
-					//this.setRequestId(-1);
-				}, destruct: function() {
-					//alert("Destroying " + this.getId());
-
-					delete this.resources;
-					delete this.buildQueue;
-					delete this.units;
-					delete this.traders;
-
-					delete this.unitOrders;
-					delete this.tradeOrders;
-
-					delete this.unitQueue;
-					delete this.recruitingSpeed;
-					delete this.incomingUnitOrders;
-					delete this.supportOrders,
-						delete this.tradeIncoming;
-
-				},
-				statics: {
-					SERIALIZABLE_MEMBERS: ["resources", "units", "buildQueue", "unitQueue", "recruitingSpeed", "unitOrders", "incomingUnitOrders", "supportOrders", "traders" /*XXX trades are useless to save, "tradeOrders", "tradeIncoming"*/],
-					createFromSimpleObject: function(o) {
-						var c = new bos.City();
-						var props = qx.Class.getProperties(c.constructor);
-
-						o["lastUpdated"] = new Date(o["lastUpdated"]);
-
-						for (var prop in props) {
-							var name = props[prop];
-							try {
-								if (o[name] != undefined) {
-									c.set(name, o[name]);
-								}
-							} catch (e) {
-								debug(name + " " + e);
-							}
-						}
-
-						var members = bos.City.SERIALIZABLE_MEMBERS;
-						for (var key in members) {
-							var m = members[key];
-							c[m] = o[m];
-						}
-
-						return c;
-					}
-				}, properties: {
-					id: {
-						init: -1
-					},
-					lastUpdated: {
-						init: null
-					},
-					requestId: {
-						init: -1
-					},
-					version: {
-						init: -1
-					},
-
-					//id: {
-					//        event: bK
-					// }, version: {
-					//        init: -1,
-					//        event: ba
-					onWater: {
-						init: false
-					}, unitCount: {
-						init: 0
-					}, unitLimit: {
-						init: 0
-					}, unitsInQueue: {
-						init: 0
-					}, buildingCount: {
-						init: 0
-					}, buildingLimit: {
-						init: 0
-					}, buildingsInQueue: {
-						init: 0
-					}, strongHold: {
-						init: false
-					}, sieged: {
-						init: false
-					}, canRecruit: {
-						init: false
-					}, canCommand: {
-						init: false
-					}, orderLimit: {
-						init: 0
-					}, barracksLevel: {
-						init: 0
-					}, townhallLevel: {
-						init: 0
-					}, marketplaceLevel: {
-						init: 0
-					}, harborLevel: {
-						init: 0
-					}, wallLevel: {
-						init: 0
-					}, hideoutSize: {
-						init: 0
-					}, foodConsumption: {
-						init: 0
-					}, foodConsumptionSupporter: {
-						init: 0
-					}, foodConsumptionQueue: {
-						init: 0
-					}, buildTimeAbsMod: {
-						init: 0
-					}, buildTimePercentMod: {
-						init: 0
-					}, plunderProtection: {
-						init: 0
-					}, goldProduction: {
-						init: 0
-					}, name: {
-						init: ""
-					}, reference: {
-						reference: ""
-					}, text: {
-						init: ""
-					}, buildingQueueStart: {
-						init: 0
-					}, buildingQueueEnd: {
-						init: 0
-					}
-				}, members: {
-					resources: null,
-					units: null,
-					buildQueue: null,
-					unitQueue: null,
-					recruitingSpeed: null,
-					unitOrders: null,
-					incomingUnitOrders: null,
-					tradeOrders: null,
-					tradeIncoming: null,
-					//----------------
-					toSimpleObject : function() {
-						var o = new Object();
-
-						var props = qx.Class.getProperties(this.constructor);
-						for (var prop in props) {
-							var name = props[prop];
-							try {
-								if (qx.lang.Type.isString(name) && name.indexOf("function ") != 0) {
-									o[name] = this.get(name);
-								}
-							} catch (e) {
-								debug(name + " " + e);
-							}
-						}
-
-						//qx does strange things for date object when serializing to JSON, below is workaround
-						o["lastUpdated"] = this.getLastUpdated().getTime();
-
-						var members = bos.City.SERIALIZABLE_MEMBERS;
-						for (var key in members) {
-							var m = members[key];
-							o[m] = this[m];
-						}
-
-						return o;
-					},
-					//----------------
-					populate: function(other) {
-console.log(this + "populate " + other);
-						this.setLastUpdated(new Date());
-
-						this.resources = new Object();
-						this.setId(-1);
-						//this.setRequestId(-1);
-
-						var props = qx.Class.getProperties(this.constructor);
-						for (var prop = 0; prop < props.length; prop++) {
-							//for (var prop in props) {
-							var name = props[prop];
-							try {
-								if (qx.lang.Type.isString(name)&&other.hasOwnProperty(name) ) {
-									this.set(name, other.get(name));
-								}
-							} catch (e) {
-								//debug(name + " " + e);
-							}
-						}
-
-						this.setId(parseInt(this.getId()));
-
-						for (var res = 1; res <= 4; res++) {
-
-							this.resources[res] = {
-								step: 0,
-								base: 0,
-								delta: 0,
-								max: 0
-							};
-
-							if (other.resources.hasOwnProperty(res)) {
-								var thisRes = this.resources[res];
-								var otherRes = other.resources[res];
-								thisRes.step = otherRes.step;
-								thisRes.base = otherRes.base;
-								thisRes.delta = otherRes.delta;
-								thisRes.max = otherRes.max;
-							}
-						}
-
-						this.buildQueue = new Array();
-
-						if (other.hasBuildQueue()) {
-							for (var i = 0; i < other.buildQueue.length; i++) {
-								var item = other.buildQueue[i];
-								this.buildQueue[i] = {
-									id: item.id,
-									building: item.building,
-									state: item.state,
-									start: item.start,
-									end: item.end,
-									type: item.type,
-									level: item.level,
-									x: item.x,
-									y: item.y,
-									isPaid: item.isPaid
-								};
-							}
-						}
-
-						this.units = new Object();
-						if (other.getUnits() != null) {
-							for (var key in other.getUnits()) {
-								var item = (other.getUnits())[key];
-								this.units[key] = {
-									count: item.count,
-									total: item.total,
-									speed: item.speed
-								};
-							}
-						}
-
-						this.unitQueue = new Array();
-						if (other.hasUnitQueue()) {
-							for (var i = 0; i < other.unitQueue.length; i++) {
-								var item = other.unitQueue[i];
-								this.unitQueue[i] = {
-									id: item.id,
-									type: item.type,
-									count: item.count,
-									batch: item.batch,
-									left: item.left,
-									start: item.start,
-									end: item.end,
-									isPaid: item.isPaid
-								};
-							}
-						}
-
-						this.traders = new Object();
-						if (other.traders != null) {
-							for (var key in other.traders) {
-								var item = other.traders[key];
-								this.traders[key] = {
-									count: item.count,
-									total: item.total,
-									order: item.order
-								};
-							}
-						}
-
-
-						this.unitOrders = new Array();
-						if (other.unitOrders != null) {
-							for (var i = 0; i < other.unitOrders.length; i++) {
-								var item = other.unitOrders[i];
-								this.unitOrders[i] = {
-									id: item.id,
-									type: item.type,
-									state: item.state,
-									start: item.start,
-									end: item.end,
-									city: item.city,
-									cityName: item.cityName,
-									player: item.player,
-									playerName: item.playerName,
-									alliance: item.alliance,
-									allianceName: item.allianceName,
-									units: item.units,
-									isDelayed: item.isDelayed,
-									recurringType: item.recurringType,
-									recurringEndStep: item.recurringEndStep,
-									quickSupport: item.quickSupport
-								};
-							}
-						}
-
-						this.supportOrders = new Array();
-						if (other.supportOrders != null) {
-							for (var i = 0; i < other.supportOrders.length; i++) {
-								var item = other.supportOrders[i];
-
-								this.supportOrders[i] = {
-									id: item.id,
-									type: item.type,
-									state: item.state,
-									end: item.end,
-									city: item.city,
-									cityName: item.cityName,
-									player: item.player,
-									playerName: item.playerName,
-									alliance: item.alliance,
-									allianceName: item.allianceName,
-									units: new Array(),
-									quickSupport: item.quickSupport
-								};
-
-								for (var u = 0; u < item.units.length; u++) {
-									this.supportOrders[i].units[u] = {
-										type: item.units[u].type,
-										count: item.units[u].count
-									};
-								}
-							}
-						}
-
-						this.tradeOrders = new Array();
-						if (other.tradeOrders != null) {
-							for (var i = 0; i < other.tradeOrders.length; i++) {
-								var item = other.tradeOrders[i];
-
-								this.tradeOrders[i] = {
-									id: item.id,
-									type: item.type,
-									transport: item.transport,
-									state: item.state,
-									start: item.start,
-									end: item.end,
-									city: item.city,
-									cityName: item.cityName,
-									player: item.player,
-									playerName: item.playerName,
-									alliance: item.alliance,
-									allianceName: item.allianceName,
-									resources: new Array()
-								};
-								for (var u = 0; u < item.resources.length; u++) {
-									this.tradeOrders[i].resources[u] = {
-										type: item.resources[u].type,
-										count: item.resources[u].count
-									};
-								}
-							}
-						}
-
-						this.tradeIncoming = new Array();
-						if (other.tradeIncoming != null) {
-							for (var i = 0; i < other.tradeIncoming.length; i++) {
-								var item = other.tradeIncoming[i];
-
-								this.tradeIncoming[i] = {
-									id: item.id,
-									type: item.type,
-									transport: item.transport,
-									state: item.state,
-									start: item.start,
-									end: item.end,
-									city: item.city,
-									cityName: item.cityName,
-									player: item.player,
-									playerName: item.playerName,
-									alliance: item.alliance,
-									allianceName: item.allianceName,
-									resources: new Array()
-								};
-								for (var u = 0; u < item.resources.length; u++) {
-									this.tradeIncoming[i].resources[u] = {
-										type: item.resources[u].type,
-										count: item.resources[u].count
-									};
-								}
-							}
-						}
-					},
-					//----------------
-
-
-
-
-					//----------------
-					getIncomingUnitOrders: function() {
-						return this.incomingUnitOrders;
-					}, getUnitTypeInfo: function(g) {
-						if (this.units != null && this.units.hasOwnProperty(g)) return this.units[g];
-						return {
-							count: 0,
-							total: 0,
-							speed: -1
-						};
-					}, getBuildQueue: function() {
-						return this.buildQueue;
-					}, hasBuildQueue: function() {
-						return this.buildQueue != null;
-					}, getUnitQueue: function() {
-						return this.unitQueue;
-					}, hasUnitQueue: function() {
-						return this.unitQueue != null;
-					}, getAvailableUnitQueueSpace: function() {
-						var e = webfrontend.data.Player.getInstance().getMaxUnitQueueSize();
-						if (this.unitQueue != null) {
-							e -= this.unitQueue.length;
-						}
-						return e;
-					}, getUnitOrders: function() {
-						return this.unitOrders;
-					}, getSupportOrders: function() {
-						return this.supportOrders;
-					}, getRecruitingSpeed: function() {
-						return this.recruitingSpeed;
-					}, getIncomingUnitOrders: function() {
-						return this.incomingUnitOrders;
-					}, getUnits: function() {
-						return this.units;
-					}, getTraders: function() {
-						return this.traders;
-					}, getTradeOrders: function() {
-						return this.tradeOrders;
-					}, getTradeOffers: function() {
-						return this.tradeOffers;
-					}, getTradeIncoming: function() {
-						return this.tradeIncoming;
-					}, getOrder: function(d) {
-						if (this.unitOrders != null) {
-							for (var i = 0; i < this.unitOrders.length; i++) if (this.unitOrders[i].id == d) return this.unitOrders[i];
-						}
-						if (this.incomingUnitOrders != null) {
-							for (var i = 0; i < this.incomingUnitOrders.length; i++) if (this.incomingUnitOrders[i].id == d) return this.incomingUnitOrders[i];
-						}
-						if (this.supportOrders != null) {
-							for (var i = 0; i < this.supportOrders.length; i++) if (this.supportOrders[i].id == d) return this.supportOrders[i];
-						}
-						return null;
-					}, getResourceCount: function(F) {
-						if (!this.resources.hasOwnProperty(F)) return 0;
-						var G = webfrontend.data.ServerTime.getInstance().getServerStep();
-						if (G == 0) return 0;
-						var I = G - this.resources[F].step;
-						var H = this.resources[F].delta;
-						if (F == 4) {
-							H -= this.getFoodConsumption() + this.getFoodConsumptionSupporter();
-						}
-						var J = I * H + this.resources[F].base;
-						J = Math.max(0, Math.min(J, this.resources[F].max));
-						return J;
-					}, getResourceGrowPerHour: function(a) {
-						if (!this.resources.hasOwnProperty(a)) return 0;
-						return this.resources[a].delta * webfrontend.data.ServerTime.getInstance().getStepsPerHour();
-					}, getResourceMaxStorage: function(f) {
-						if (!this.resources.hasOwnProperty(f)) return 0;
-						return this.resources[f].max;
-					}, getResourceStorageFullTime: function(K) {
-						if (!this.resources.hasOwnProperty(K)) return new Date(0);
-						var L = this.getResourceGrowPerHour(K);
-						if (L <= 0) return new Date(0);
-						var M = this.resources[K].step + (this.resources[K].max - this.resources[K].base) / this.resources[K].delta;
-						if (webfrontend.data.ServerTime.getInstance().getServerStep() >= M) return new Date(0);
-						return webfrontend.data.ServerTime.getInstance().getStepTime(M);
-					}, getResourceStorageEmptyTime: function(l, m) {
-						if (!this.resources.hasOwnProperty(l)) return new Date(0);
-						var n = this.resources[l].step + this.resources[l].base / -(this.resources[l].delta - m);
-						if (webfrontend.data.ServerTime.getInstance().getServerStep() >= n) return new Date(0);
-						return webfrontend.data.ServerTime.getInstance().getStepTime(n);
-					}, getResourceCountTime: function(o, p) {
-						if (!this.resources.hasOwnProperty(o)) return new Date(0);
-						if (this.resources[o].delta <= 0) return new Date(0);
-						var q = this.resources[o].step + (p - this.resources[o].base) / this.resources[o].delta;
-						return webfrontend.data.ServerTime.getInstance().getStepTime(q);
-					}, countDefenders: function() {
-						if (this.units == null || this.units.length == 0) return 0;
-						var c = 0;
-						for (var b in this.units) c += this.units[b].count;
-						return c;
-					}, getGoldGrowPerHour: function() {
-						return this.getGoldProduction() * webfrontend.data.ServerTime.getInstance().getStepsPerHour();
-					}, _applyId: function(O, P) {
-						if (O != -1 && P == -1) webfrontend.net.UpdateManager.getInstance().addConsumer(Y, this);
-						if (O == -1 && P != -1) {
-							webfrontend.net.UpdateManager.getInstance().removeConsumer(Y);
-							this.setId(-1);
-						}
-					}, getSupportMoving: function(r) {
-						r = r || false;
-						var u = [];
-						var t = this.getUnitOrders();
-						if (t) {
-							var s = t.length;
-							for (var i = 0; i < s; i++) {
-								if (t[i].quickSupport && r) {
-									continue;
-								}
-								if (t[i].type == 4) {
-									if (t[i].state == 1 || t[i].state == 2) {
-										u[u.length] = [t[i], 0];
-									}
-								}
-							}
-						}
-						var t = this.getSupportOrders();
-						if (t) {
-							var s = t.length;
-							for (var i = 0; i < s; i++) {
-								if (t[i].quickSupport && r) {
-									continue;
-								}
-								if (t[i].type == 4 && t[i].state == 1) {
-									u[u.length] = [t[i], 1];
-								}
-							}
-						}
-						return u;
-					},
-					//MINE
-					buildQueueOcuppied: function() {
-						if (this.buildQueue == null || this.buildQueue.length == 0) {
-							return null;
-						}
-						return (this.buildQueue[this.buildQueue.length - 1].end - webfrontend.data.ServerTime.getInstance().getServerStep());
-					},
-					unitQueueOcuppied: function() {
-						if (this.unitQueue == null || this.unitQueue.length == 0) {
-							return null;
-						}
-						return (this.unitQueue[this.unitQueue.length - 1].end - webfrontend.data.ServerTime.getInstance().getServerStep());
-					},
-					setResourceCount: function(res, count) {
-						if (!this.resources.hasOwnProperty(res)) {
-							return;
-						}
-
-						var serverStep = webfrontend.data.ServerTime.getInstance().getServerStep();
-						if (serverStep == 0) return;
-
-						this.resources[res].step = serverStep;
-						this.resources[res].base = count;
-					},
-					getFoodBalance: function() {
-						var steps = webfrontend.data.ServerTime.getInstance().getStepsPerHour();
-						var foodGrow = Math.floor(this.getResourceGrowPerHour(bos.Const.FOOD) + 0.5);
-						var foodCons = Math.round(this.getFoodConsumption() * steps);
-						var foodConsQueue = Math.round(this.getFoodConsumptionQueue() * steps);
-						var foodConsSupport = Math.round(this.getFoodConsumptionSupporter() * steps);
-
-						var foodBalance = foodGrow - foodCons - foodConsQueue - foodConsSupport;
-						return foodBalance;
-					},
-					getTradeIncomingResources: function(resType) {
-						var totalRes = 0;
-						if (this.tradeIncoming == null) {
-							return totalRes;
-						}
-						var now = webfrontend.data.ServerTime.getInstance().getServerStep();
-						for (var i = 0; i < this.tradeIncoming.length; i++) {
-							var order = this.tradeIncoming[i];
-							if (order.end >= now) {
-								for (var j = 0; j < order.resources.length; j++) {
-									var r = order.resources[j];
-									if (r.type == resType) {
-										totalRes += r.count;
-									}
-								}
-							}
-						}
-						return totalRes;
-					},
-					urthBuildingGetBuildTime: function(P, Q, R, S) {
-						if (S == null) S = this.urthBuildingGetTotalSpeedBouns();
-						var res = webfrontend.res.Main.getInstance();
-						var T = 0;
-						if (res.buildings.hasOwnProperty(P) && res.buildings[P].r.hasOwnProperty(Q)) {
-							var U = res.buildings[P].r[Q].t;
-							if (res.buildings[P].im == 0) {
-								U = (U * 100) / S;
-								if (R == 2 || R == 5) U /= 2;
-							}
-							T = Math.floor(Math.max(webfrontend.data.Server.getInstance().getBuildingMinimumBuildTime(), U + 0.5));
-						}
-						return T;
-					},
-					urthBuildingGetDemolishTime: function(V, W) {
-						var X = this.urthBuildingGetTotalSpeedBouns();
-						var Y = 0;
-						for (var ba = W; ba > 0; ba--) Y += this.urthBuildingGetBuildTime(V, ba, 5, X);
-						return Y;
-					},
-					urthBuildingGetTotalSpeedBouns: function() {
-						//var city = webfrontend.data.City.getInstance();
-						var city = this;
-						var tech = webfrontend.data.Tech.getInstance();
-						var bf = tech.getBonus("constSpeed", webfrontend.data.Tech.research);
-						var be = tech.getBonus("constSpeed", webfrontend.data.Tech.shrine);
-						var bc = Math.floor(city.getBuildTimePercentMod());
-						return bc + bf + be;
-					}
-				}
-			});
-
-			qx.Class.define("bos.net.CommandManager", {
-				type: "singleton",
-				extend: qx.core.Object,
-				construct: function() {
-					this._sendTimer = new qx.event.Timer(MIN_SEND_COMMAND_INTERVAL);
-					this._sendTimer.addListener("interval", this.sendPendingCommand, this);
-					this._sendTimer.start();
-paDebug("command Ctor");
-				},
-				properties: {
-					lastSendCommand: {
-						init: 0
-					}
-				},
-				members: {
-					_toSend: [],
-					_sendTimer: null,
-					sendCommand: function(endPoint, request, context, onSendDone, extraValue) {
-						var now = (new Date()).getTime();
-						if (now - this.getLastSendCommand() >= MIN_SEND_COMMAND_INTERVAL) {
-							this.forcedSendCommand(endPoint, request, context, onSendDone, extraValue);
-						} else {
-							this._toSend.push({
-								endPoint: endPoint,
-								request: request,
-								context: context,
-								onSendDone: onSendDone,
-								extraValue: extraValue
-							});
-						}
-					},
-					getNumberOfPendingCommands: function() {
-						return this._toSend.length;
-					},
-					forcedSendCommand: function(endPoint, request, context, onSendDone, extraValue) {
-						var now = (new Date()).getTime();
-						webfrontend.net.CommandManager.getInstance().sendCommand(endPoint, request, context, onSendDone, extraValue);
-						this.setLastSendCommand(now);
-					},
-					sendPendingCommand: function() {
-						if (this._toSend.length > 0) {
-							var o = this._toSend[0];
-							this._toSend.splice(0, 1);
-paDebug("send " + o);
-							this.forcedSendCommand(o.endPoint, o.request, o.context, o.onSendDone, o.extraValue);
-						}
-					},
-					pollCity: function(cityId) {
-						var sb = new qx.util.StringBuilder(2048);
-						sb.add("CITY", ":", cityId, '\f');
-						this.poll(sb.get(), cityId);
-					},
-					pollWorld: function(sectorIds, callbackInfo) {
-						var sb = new qx.util.StringBuilder(2048);
-						sb.add("WORLD", ":");
-
-						for (var i = 0; i < sectorIds.length; i++) {
-							var sectorId = sectorIds[i];
-							var s = I_KEB_MEB(sectorId) + I_KEB_REB(0);
-							sb.add(s);
-						}
-
-						sb.add('\f');
-						this.poll(sb.get(), sectorIds, callbackInfo);
-					},
-					pollWholeWorld: function(callbackInfo) {
-						//TODO get real dimension of map
-						var sectorsPerRow = 22;
-						var sectors = new Array();
-						for (var row = 0; row < sectorsPerRow; row++) {
-							for (var col = 0; col < sectorsPerRow; col++) {
-								var sector = 32 * row + col;
-								sectors.push(sector);
-							}
-						}
-						bos.net.CommandManager.getInstance().pollWorld(sectors, callbackInfo);
-					},
-					poll: function(requests, callbackArg, callbackInfo) {
-						this.requestCounter = 0;
-						console.debug("poll " + requests  );
-
-
-						var updateManager = webfrontend.net.UpdateManager.getInstance();
-
-						var data = new qx.util.StringBuilder(2048);
-						data.add('{"session":"', updateManager.getInstanceGuid(), '","requestid":"', updateManager.requestCounter, '","requests":', qx.lang.Json.stringify(requests), "}");
-						updateManager.requestCounter++;
-
-						var req = new qx.io.remote.Request(updateManager.getUpdateService() + "/Service.svc/ajaxEndpoint/Poll", "POST", "application/json");
-						req.setProhibitCaching(false);
-						req.setRequestHeader("Content-Type", "application/json");
-						req.setData(data.get());
-						req.setTimeout(10000);
-						req.addListener("completed", function(e) {
-							this.completeRequest(e, callbackArg, callbackInfo);
-						}, this);
-						req.addListener("failed", this.failRequest, this);
-						req.addListener("timeout", this.timeoutRequest, this);
-						req.send();
-					},
-					completeRequest: function(e, obj, callbackInfo) {
-console.debug("compltereq " + e + callbackInfo );
-						if (e.getContent() == null) return;
-
-						for (var i = 0; i < e.getContent().length; i++) {
-							var item = e.getContent()[i];
-							var type = item.C;
-							if (type == "CITY") {
-								this.parseCity(obj, item.D);
-							} else if (type == "WORLD") {
-								this.parseWorld(item.D);
-							} else if (type == "OA") {
-								this.parseOA(item.D);
-							}
-						}
-
-						if (callbackInfo && callbackInfo.callbackFun && callbackInfo.callbackThis) {
-							callbackInfo.callbackFun.call(callbackInfo.callbackThis);
-						}
-					},
-					failRequest: function(e) {
-						console.debug("fail " + e  );
-
-					},
-					timeoutRequest: function(e) {
-						console.debug("timeout " + e  );
-
-					},
-					parseOA: function(data) {
-						console.debug("OA " +data  );
-
-						if (data == null || data.a == null) {
-							return;
-						}
-						try {
-							var sum = 0;
-							for (var i = 0; i < data.a.length; i++) {
-								var a = data.a[i];
-								sum += a.ta;
-							}
-							console.log(sum);
-						} catch (e) {
-							paError(e);
-						}
-					},
-					parseWorld: function(data) {
-						console.debug("padse " + data  );
-
-						if (data == null || data.s == null) {
-							return;
-						}
-						try {
-							var server = bos.Server.getInstance();
-							for (var i = 0; i < data.s.length; i++) {
-								var d = data.s[i];
-
-								var sector;
-								if (server.sectors[d.i] != null) {
-									sector = server.sectors[d.i];
-								} else {
-									sector = new bosSector();
-								}
-								sector.init(d);
-
-								server.sectors[d.i] = sector;
-							}
-						} catch (e) {
-							paError(e);
-						}
-					},
-					parseCity: function(cityId, data) {
-						console.debug("pars " +data );
-
-						try {
-							var server = bos.Server.getInstance();
-							var city = server.cities[cityId];
-							var store = false;
-							if (city == undefined) {
-								city = new bos.City();
-								store = true;
-							}
-							city.dispatchResults(data);
-							if (store) {
-								city.setId(cityId);
-								server.cities[cityId] = city;
-							}
-							server.markCityDirty(cityId);
-						} catch (e) {
-							paError(e);
-						}
-					}
-				}
-			});
-			function pollCity(cityId)
-			{
-				bos.Server.pollAllCities();
-			}
 			qx.Class.define("ava.CombatTools", {
 				type:    "static",
 				statics: {
@@ -17281,9 +15208,8 @@
 				startup.initialized = true;
 
 				CreateAvaTweak();
-				new AvaInit();
+				AvaInit();
 				ava.Main.getInstance().initialize();
-				//initSession();
 			}
 		}
 
@@ -17317,7 +15243,7 @@
 		}
 
 		window.setTimeout(startup, 2000);
-	} // main
+	}; // main
 
 
 	/* inject this script into the website */
\ No newline at end of file
